{{- template "common.deployment" (list . "pipeline.deployment") -}}
{{- define "secret_paths" }}
{{- range .Values.vault.secretPaths }}
{{- print "- -cn=secret:" . ":fmt=json"}}
{{- end -}}
{{- end -}}
{{- define "pipeline.deployment" -}}
## Define overrides for your Deployment resource here, e.g.
spec:
  template:
    metadata:
      labels:
        app: test  
      annotations:
        pod.boostport.com/vault-approle: cd-app
        pod.boostport.com/vault-init-container: get-vault-token
    spec:
      imagePullSecrets: 
      - name: otc-registry-secret
      volumes:
      - name: vault-token
        emptyDir: {}
      - name: secrets 
        emptyDir: {}
      initContainers:
      - name: get-vault-token
        image: boostport/kubernetes-vault-init
        imagePullPolicy: Always
        env:
        - name: VAULT_ROLE_ID
          value: {{ .Values.vault.roleID }}
        volumeMounts:
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
      - name: vault-side-kick
        image: quay.io/ukhomeofficedigital/vault-sidekick:v0.3.3
        env:
        - name: AUTH_FILE 
          value: /var/run/secrets/boostport.com/vault-token
        - name: AUTH_FORMAT
          value: kubernetes-vault
        args:
          - -output=/etc/secrets
          - -one-shot
          - -logtostderr=true
{{ include "secret_paths" . | indent 10 }}
        volumeMounts:
          - name: secrets
            mountPath: /etc/secrets
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
      containers:
      - {{ template "common.container" (list . "pipeline.deployment.container") }}
        volumeMounts:
        - name: secrets 
          mountPath: /etc/secrets
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com 
{{- end -}}
{{- define "pipeline.deployment.container" -}}
## Define overrides for your Container here, e.g.
#livenessProbe:
#  httpGet:
#    path: /
#    port: 80
#readinessProbe:
#  httpGet:
#    path: /status
#    port: 80
env:
{{ $fullname := include "common.fullname" . }}
{{- range $envvar, $envvarvalue := .Values.configmap.data }}
- {{ template "pipeline.common.envvar.value" (list $envvar $fullname $envvar ) }}
{{- end }}
{{- if .Values.secret }}
{{- range $envvar, $envvarvalue := .Values.secret.data }}
- {{ template "common.envvar.secret" (list $envvar $fullname $envvar) }}
{{- end }}
{{- end }}
{{- end -}}
