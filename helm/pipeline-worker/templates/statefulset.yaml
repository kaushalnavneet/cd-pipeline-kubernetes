{{- template "pipeline.common.statefulset" (list . "pipeline.statefulset") -}}
{{- define "secret_paths" }}
{{- range .Values.vaultcommon.secretPaths }}
{{ print "- -cn=secret:" . ":fmt=json"}}
{{- end -}}
{{- range .Values.vault.secretPaths }}
{{ print "- -cn=secret:" . ":fmt=json"}}
{{- end -}}
{{- end -}}
{{- define "pipeline.statefulset" -}}
## Define overrides for your Deployment resource here, e.g.
spec:
  replicas: {{ .Values.replicas }}
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: dockervarlib
      annotations:
      {{- range $key, $value := .Values.persistentVolume.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
    spec:
      accessModes:
      {{- range .Values.persistentVolume.accessModes }}
        - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistentVolume.size | quote }}
        {{- if .Values.persistentVolume.iops }}
          iops: {{ .Values.persistentVolume.iops | quote }} 
        {{- end }}
    {{- if .Values.persistentVolume.storageClass }}
    {{- if (eq "-" .Values.persistentVolume.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.persistentVolume.storageClass }}"
    {{- end }}
    {{- end }}
{{- end }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      imagePullSecrets:
      - name: otc-registry-secret
      serviceAccountName: {{ template "common.fullname" . }}
      serviceAccount: {{ template "common.fullname" . }}
      volumes:
    {{- if not .Values.persistentVolume.enabled }}
      - name: dockervarlib
        emptyDir: {}
    {{- end }}
      - name: vault-sidekick
        secret:
          defaultMode: 420
          secretName: vault-sidekick
          items:
          - key: vault.pem
            path: vault.pem
      - name: vault-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: {{ template "common.fullname" . }}
      - name: varlog
        emptyDir: {}
      - name: otc-registry-secret
        secret:
          secretName: otc-registry-secret
      initContainers:
      - name: vault-sidekick
        image: registry.ng.bluemix.net/opentoolchain/vault-sidekick:latest
        args:
        - -logtostderr=true
        - -ca-cert=/var/run/certs/vault.pem
        - -one-shot
{{ include "secret_paths" . | indent 8 }}
        env:
        - name: VAULT_ADDR
          valueFrom:
            configMapKeyRef:
              key: VAULT_ADDR
              name: vault-sidekick
        - name: VAULT_AUTH_METHOD
          valueFrom:
            configMapKeyRef:
              key: VAULT_AUTH_METHOD
              name: vault-sidekick
        - name: VAULT_SIDEKICK_ROLE_ID
          valueFrom:
            secretKeyRef:
              key: VAULT_SIDEKICK_ROLE_ID
              name: vault-sidekick
        - name: VAULT_SIDEKICK_SECRET_ID
          valueFrom:
            secretKeyRef:
              key: VAULT_SIDEKICK_SECRET_ID
              name: vault-sidekick
        - name: VAULT_OUTPUT
          value: /home/vault/secrets
        - name: VAULT_COMPONENT
          value: {{ template "common.fullname" . }}
        volumeMounts:
        - name: vault-sidekick
          mountPath: /var/run/certs
          readOnly: true
      containers:
      - {{ template "common.container" (list . "pipeline.statefulset.container") }}
        securityContext:
          privileged: true
        volumeMounts:
        - name: vault-secrets
          mountPath: /etc/secrets
          readOnly: true
        - name: otc-registry-secret
          mountPath: /var/run/secrets/cloud.ibm.com/travis-worker
          readOnly: true
        - name: dockervarlib
          mountPath: /var/lib/docker
        - name: varlog
          mountPath: /var/log
      - name: docker-log
        image: alpine
        args: [/bin/sh, -c, 'while ! tail -n+1 -f /var/log/docker.log ; do sleep 5 ; done']
        volumeMounts:
        - name: varlog
          mountPath: /var/log
      - name: travis-worker-log
        image: alpine 
        args: [/bin/sh, -c, 'while ! tail -n+1 -f /var/log/travis-worker.log ; do sleep 5 ; done']
        volumeMounts:
        - name: varlog
          mountPath: /var/log
{{- end -}}
{{- define "pipeline.statefulset.container" -}}
# Define overrides for your Container here, e.g.
#livenessProbe:
#  httpGet:
#    path: /
#    port: 80
#readinessProbe:
#  httpGet:
#    path: /status
#    port: 80
env:
{{ $fullname := include "common.fullname" . }}
{{- range $envvar, $envvarvalue := .Values.configmap.data }}
- {{ template "pipeline.common.envvar.value" (list $envvar $fullname $envvar ) }}
{{- end }}
{{- if .Values.secret }}
{{- range $envvar, $envvarvalue := .Values.secret.data }}
- {{ template "common.envvar.secret" (list $envvar $fullname $envvar) }}
{{- end }}
{{- end }}
{{- end -}}
