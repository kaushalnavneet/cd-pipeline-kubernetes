{{- template "pipeline.common.statefulset" (list . "pipeline.common.statefulset") -}}
{{- define "secret_paths" }}
{{- range .Values.vault.secretPaths }}
{{- print "- -cn=secret:" . ":fmt=json"}}
{{- end -}}
{{- end -}}
{{- define "pipeline.common.statefulset" -}}
## Define overrides for your Deployment resource here, e.g.
spec:
  replicas: {{ .Values.replicas }}
  template:
    spec:
      imagePullSecrets:
      - name: otc-registry-secret
      volumes:
      - name: vault-sidekick
        secret:
          defaultMode: 420
          secretName: vault-sidekick
          items:
          - key: vault.pem
            path: vault.pem
      - name: secrets
        emptyDir: {}
      containers:
      - name: vault-sidekick
        image: quay.io/ukhomeofficedigital/vault-sidekick:latest
        args:
        - -logtostderr=true
        - -ca-cert=/var/run/certs/vault.pem
{{ include "secret_paths" . | indent 8 }}
        env:
        - name: VAULT_ADDR
          valueFrom:
            configMapKeyRef:
              key: VAULT_ADDR
              name: vault-sidekick
        - name: VAULT_AUTH_METHOD
          valueFrom:
            configMapKeyRef:
              key: VAULT_AUTH_METHOD
              name: vault-sidekick
        - name: VAULT_SIDEKICK_ROLE_ID
          valueFrom:
            secretKeyRef:
              key: VAULT_SIDEKICK_ROLE_ID
              name: vault-sidekick
        - name: VAULT_SIDEKICK_SECRET_ID
          valueFrom:
            secretKeyRef:
              key: VAULT_SIDEKICK_SECRET_ID
              name: vault-sidekick
        - name: VAULT_OUTPUT
          value: /etc/secrets
        volumeMounts:
        - name: secrets
          mountPath: /etc/secrets
        - name: vault-sidekick
          mountPath: /var/run/certs
          readOnly: true
      - {{ template "common.container" (list . "pipeline.deployment.container") }}
        volumeMounts:
        - name: secrets
          mountPath: /etc/secrets
          readOnly: true
        - name: dockervarlib
          mountPath: /var/lib/docker
{{- end -}}
{{- define "pipeline.common.statefulset.container" -}}
# Define overrides for your Container here, e.g.
#livenessProbe:
#  httpGet:
#    path: /
#    port: 80
#readinessProbe:
#  httpGet:
#    path: /status
#    port: 80

{{- if .Values.persistentVolume.enabled }}
volumeClaimTemplates:
- metadata:
    name: dockervarlib 
    annotations:
    {{- range $key, $value := .Values.persistentVolume.annotations }}
      {{ $key }}: {{ $value }}
    {{- end }}
  spec:
    accessModes:
    {{- range .Values.persistentVolume.accessModes }}
      - {{ . | quote }}
    {{- end }}
    resources:
      requests:
        storage: {{ .Values.persistentVolume.size | quote }}
  {{- if .Values.persistentVolume.storageClass }}
  {{- if (eq "-" .Values.persistentVolume.storageClass) }}
    storageClassName: ""
  {{- else }}
    storageClassName: "{{ .Values.persistentVolume.storageClass }}"
  {{- end }}
  {{- end }}
{{- end }}
env:
{{ $fullname := include "common.fullname" . }}
{{- range $envvar, $envvarvalue := .Values.configmap.data }}
- {{ template "pipeline.common.envvar.value" (list $envvar $fullname $envvar ) }}
{{- end }}
{{- if .Values.secret }}
{{- range $envvar, $envvarvalue := .Values.secret.data }}
- {{ template "common.envvar.secret" (list $envvar $fullname $envvar) }}
{{- end }}
{{- end }}
{{- end -}}
