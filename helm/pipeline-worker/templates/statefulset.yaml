{{- template "pipeline.common.statefulset" (list . "pipeline.statefulset") -}}
{{- define "secret_paths" }}
{{- range .Values.vaultcommon.secretPaths }}
{{ print "- -cn=secret:" . ":fmt=json"}}
{{- end -}}
{{- range .Values.vault.secretPaths }}
{{ print "- -cn=secret:" . ":fmt=json"}}
{{- end -}}
{{- end -}}
{{- define "pipeline.statefulset" -}}
## Define overrides for your Deployment resource here, e.g.
spec:
  replicas: {{ .Values.replicas }}
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: dockervarlib
      annotations:
      {{- range $key, $value := .Values.persistentVolume.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
    spec:
      accessModes:
      {{- range .Values.persistentVolume.accessModes }}
        - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistentVolume.size | quote }}
        {{- if .Values.persistentVolume.iops }}
          iops: {{ .Values.persistentVolume.iops | quote }} 
        {{- end }}
    {{- if .Values.persistentVolume.storageClass }}
    {{- if (eq "-" .Values.persistentVolume.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.persistentVolume.storageClass }}"
    {{- end }}
    {{- end }}
{{- end }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      imagePullSecrets:
      - name: otc-registry-secret
      serviceAccountName: {{ template "common.fullname" . }}
      serviceAccount: {{ template "common.fullname" . }}
      volumes:
    {{- if not .Values.persistentVolume.enabled }}
      - name: dockervarlib
        emptyDir: {}
    {{- end }}
      - name: vault-sidekick
        secret:
          defaultMode: 420
          secretName: vault-sidekick
          items:
          - key: vault.pem
            path: vault.pem
      - name: vault-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: {{ template "common.fullname" . }}
      - name: varlog
        emptyDir: {}
      - name: roothome
        emptyDir: {}
      - name: otc-registry-secret
        secret:
          secretName: otc-registry-secret
      initContainers:
      - args:
          - sh
          - -c
          - FN=$( ls /etc/secrets/*.secret  2>&1 | head -1 );
            if [ -e "$FN" ]; then exit 0; fi;
            echo "No secrets";
            sleep 5;
            exit 1;
        image: alpine:3.12
        imagePullPolicy: IfNotPresent
        name: vault-init
        volumeMounts:
        - mountPath: /etc/secrets
          readOnly: true
          name: vault-secrets
      containers:
      - name: docker
        image: us.icr.io/opentoolchain/travis-docker:secure
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        env:
          {{ $fullname := include "common.fullname" . }}
          {{- range $envvar, $envvarvalue := .Values.configmap.data }}
        - {{ template "pipeline.common.envvar.value" (list $envvar $fullname $envvar ) }}
          {{- end }}
          {{- if .Values.secret }}
          {{- range $envvar, $envvarvalue := .Values.secret.data }}
        - {{ template "common.envvar.secret" (list $envvar $fullname $envvar) }}
          {{- end }}
          {{- end }}
        lifecycle:
          postStart:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - >
                  #!/usr/bin/env bash
                  if [ -d /etc/secrets ]; then
                    for file in /etc/secrets/*.secret; do
                      [ -e "$file" ] || continue
                      eval "$(/root/jq -r  '. | to_entries | .[] | "export " + .key + "=" + ( .value|if (type|. != "string") then tostring else .|tojson end)' < $file)"
                    done
                  fi
                  ln -sfn /tmp/cloud.ibm.com/travis-worker/.dockercfg /root/.dockercfg
                  
                  for ITER in {1..6}
                  do
                    docker info >/dev/null 2>&1
                    if [ $? -eq 0 ]; then
                      break
                    fi
                    echo "Waiting 1s for docker daemon..."
                    sleep 10
                  done
                  docker info >/dev/null 2>&1
                  [ $? -eq 0 ] || exit 1
                  
                  docker pull ${WORKER_LEGACY_IMAGE}
                  docker tag ${WORKER_LEGACY_IMAGE} ibm_devops_services/worker_base:latest
                  docker pull ${WORKER_DIND_IMAGE} 
                  docker tag ${WORKER_DIND_IMAGE} ibm_devops_services/worker_dind:latest
                  
                  LEGACY_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 1.0 | sed -e 's#.*=\(\)#\1#'`
                  LEGACY_BASE_IMAGE_TAG=`echo $WORKER_LEGACY_IMAGE | sed -e 's#.*:\(\)#\1#'`
                  docker tag ${WORKER_LEGACY_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${LEGACY_BASE_IMAGE_NAME}:${LEGACY_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${LEGACY_BASE_IMAGE_NAME}:${LEGACY_BASE_IMAGE_TAG}
                  
                  VERSION_2_0_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.0 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_0_BASE_IMAGE_TAG=`echo $WORKER_20_BASE_IMAGE | sed -e 's#.*:\(\)#\1#'`
                  docker pull ${WORKER_20_BASE_IMAGE}
                  docker tag ${WORKER_20_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_0_BASE_IMAGE_NAME}:${VERSION_2_0_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_0_BASE_IMAGE_NAME}:${VERSION_2_0_BASE_IMAGE_TAG}
                  
                  VERSION_2_1_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.1 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_1_BASE_IMAGE_TAG=`echo $WORKER_21_BASE_IMAGE | sed -e 's#.*:\(\)#\1#'`
                  docker pull ${WORKER_21_BASE_IMAGE}
                  docker tag ${WORKER_21_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_1_BASE_IMAGE_NAME}:${VERSION_2_1_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_1_BASE_IMAGE_NAME}:${VERSION_2_1_BASE_IMAGE_TAG}
                  
                  VERSION_2_2_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.2 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_2_BASE_IMAGE_TAG=`echo $WORKER_22_BASE_IMAGE | sed -e 's#.*:\(\)#\1#'`
                  docker pull ${WORKER_22_BASE_IMAGE}
                  docker tag ${WORKER_22_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_2_BASE_IMAGE_NAME}:${VERSION_2_2_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_2_BASE_IMAGE_NAME}:${VERSION_2_2_BASE_IMAGE_TAG}
                  
                  VERSION_2_3_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.3 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_3_BASE_IMAGE_TAG=`echo $WORKER_23_BASE_IMAGE | sed -e 's#.*:\(\)#\1#'`
                  docker pull ${WORKER_23_BASE_IMAGE}
                  docker tag ${WORKER_23_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_3_BASE_IMAGE_NAME}:${VERSION_2_3_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_3_BASE_IMAGE_NAME}:${VERSION_2_3_BASE_IMAGE_TAG}
                  
                  VERSION_2_4_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.4 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_4_BASE_IMAGE_TAG=2.4
                  docker pull ${WORKER_24_BASE_IMAGE}
                  docker tag ${WORKER_24_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_4_BASE_IMAGE_NAME}:${VERSION_2_4_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_4_BASE_IMAGE_NAME}:${VERSION_2_4_BASE_IMAGE_TAG}
                  
                  VERSION_2_5_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.5 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_5_BASE_IMAGE_TAG=2.5
                  docker pull ${WORKER_25_BASE_IMAGE}
                  docker tag ${WORKER_25_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_5_BASE_IMAGE_NAME}:${VERSION_2_5_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_5_BASE_IMAGE_NAME}:${VERSION_2_5_BASE_IMAGE_TAG}
                  
                  VERSION_2_6_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.6 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_6_BASE_IMAGE_TAG=2.6
                  docker pull ${WORKER_26_BASE_IMAGE}
                  docker tag ${WORKER_26_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_6_BASE_IMAGE_NAME}:${VERSION_2_6_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_6_BASE_IMAGE_NAME}:${VERSION_2_6_BASE_IMAGE_TAG}
                  
                  VERSION_2_7_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.7 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_7_BASE_IMAGE_TAG=2.7
                  docker pull ${WORKER_27_BASE_IMAGE}
                  docker tag ${WORKER_27_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_7_BASE_IMAGE_NAME}:${VERSION_2_7_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_7_BASE_IMAGE_NAME}:${VERSION_2_7_BASE_IMAGE_TAG}
                  
                  VERSION_2_8_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.8 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_8_BASE_IMAGE_TAG=2.8
                  docker pull ${WORKER_28_BASE_IMAGE}
                  docker tag ${WORKER_28_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_8_BASE_IMAGE_NAME}:${VERSION_2_8_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_8_BASE_IMAGE_NAME}:${VERSION_2_8_BASE_IMAGE_TAG}
                  
                  
                  VERSION_2_9_BASE_IMAGE_NAME=`echo $WORKER_CURATED_IMAGES | tr ',' $'\n' | grep 2.9 | sed -e 's#.*=\(\)#\1#'`
                  VERSION_2_9_BASE_IMAGE_TAG=2.9
                  docker pull ${WORKER_29_BASE_IMAGE}
                  docker tag ${WORKER_29_BASE_IMAGE} ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_9_BASE_IMAGE_NAME}:${VERSION_2_9_BASE_IMAGE_TAG}
                  docker push ${WORKER_TRAVIS_REGISTRY_URL}/${VERSION_2_9_BASE_IMAGE_NAME}:${VERSION_2_9_BASE_IMAGE_TAG}
          preStop:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - >
                  jobs=$(docker ps | tail -n+2)
                  while [ ! -z $jobs ]; do
                    sleep 15
                    docker ps
                    jobs=$(docker ps | tail -n+2)
                  done
                  exit 0
        volumeMounts:
          - name: vault-secrets
            mountPath: /etc/secrets
            readOnly: true
          - name: otc-registry-secret
            mountPath: /tmp/cloud.ibm.com/travis-worker
            readOnly: true
          - name: dockervarlib
            mountPath: /var/lib/docker
          - name: varlog
            mountPath: /var/log
      - {{ template "common.container" (list . "pipeline.statefulset.container") }}
        volumeMounts:
        - name: vault-secrets
          mountPath: /etc/secrets
          readOnly: true
        - name: otc-registry-secret
          mountPath: /tmp/cloud.ibm.com/travis-worker
          readOnly: true
        - name: dockervarlib
          mountPath: /var/lib/docker
        - name: varlog
          mountPath: /var/log
{{- end -}}
{{- define "pipeline.statefulset.container" -}}
{{- if .Values.probes.enabled }}
livenessProbe:
{{- if .Values.probes.liveness.exec }}
  exec:
    command: {{.Values.probes.liveness.exec.command}}
{{- else }}
  httpGet:
    path: {{.Values.probes.liveness.path | default "/version"}}
    port: 8080
{{- end }}
  initialDelaySeconds: {{.Values.probes.liveness.initialDelay | default 30}}
  timeoutSeconds: {{.Values.probes.liveness.timeoutSeconds | default 3}}
  periodSeconds: {{.Values.probes.liveness.periodSeconds | default 30}}
{{- if .Values.probes.readiness.enabled }}
readinessProbe:
  httpGet:
    path: {{.Values.probes.readiness.path | default "/status"}}
    port: 8080
  initialDelaySeconds: {{.Values.probes.readiness.initialDelay | default 30}}
  timeoutSeconds: {{.Values.probes.readiness.timeoutSeconds | default 3}}
  periodSeconds: {{.Values.probes.readiness.periodSeconds | default 30}}
{{- end }}
{{- end }}
env:
{{ $fullname := include "common.fullname" . }}
{{- range $envvar, $envvarvalue := .Values.configmap.data }}
- {{ template "pipeline.common.envvar.value" (list $envvar $fullname $envvar ) }}
{{- end }}
{{- if .Values.secret }}
{{- range $envvar, $envvarvalue := .Values.secret.data }}
- {{ template "common.envvar.secret" (list $envvar $fullname $envvar) }}
{{- end }}
{{- end }}
{{- end -}}
