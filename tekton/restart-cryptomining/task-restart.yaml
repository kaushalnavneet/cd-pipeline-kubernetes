apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: restart-deployment
spec:
  params:
    - name: serviceName
      default: "cryptomining-detector"
    - name: serviceType
      default: "deployment"
    - name: clusters
      default: "otc-us-south-dev"
    - name: clusterNamespace
      default: "opentoolchain"
    - name: deployBaseImage
      default: "us.icr.io/opentoolchain/cd-deploy-base:deploy"
    - name: environment
      default: "development"
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
  workspaces:
    - name: task-pvc
      mountPath: /workspace
  steps:
    - name: deploy
      image: $(params.deployBaseImage)
      imagePullPolicy: IfNotPresent
      env:
        - name: HOME
          value: "/root"
        - name: SERVICE_NAME
          value: $(params.serviceName)
        - name: SERVICE_TYPE
          value: $(params.serviceType)
        - name: CLUSTERS
          value: $(params.clusters)
        - name: CLUSTER_NAMESPACE
          value: $(params.clusterNamespace)
        - name: ENVIRONMENT
          value: $(params.environment)
      workingDir: /workspace
      command: ["/bin/bash", "-c"]
      args:
        - |
          export HOME=/root
          [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
          set -e
          cd /workspace

          ibmcloud config --check-version=false
          ibmcloud plugin install -f kubernetes-service
          ibmcloud login -a ${API} -r ${ENVIRONMENT} --apikey ${API_KEY}

          set +e
          function cluster_config() {
              # 1 - cluster name
              for iteration in {1..30}
              do
                  echo "Running cluster config for cluster $1: $iteration / 30"
                  ibmcloud ks cluster config --cluster $1
                  if [[ $? -eq 0 ]]; then
                      return 0
                  else
                      echo "Cluster config for $1 failed. Trying again..."
                      sleep 5
                  fi
              done
              return 1
          }
          

          IFS=',' read -ra CLUSTER_ARRAY <<< "$CLUSTERS"
          for CLUSTER_NAME in "${CLUSTER_ARRAY[@]}";do
            cluster_config ${CLUSTER_NAME}
            set -e
            RS=$( kubectl -n ${CLUSTER_NAMESPACE} get pods | grep ${SERVICE_NAME}  | rev | cut -f2- -d- | rev | sort -u | head -1 )
            echo Restarting ${SERVICE_NAME}
            kubectl -n ${CLUSTER_NAMESPACE} rollout restart ${SERVICE_TYPE} ${SERVICE_NAME}
            echo Checking status...
            kubectl -n ${CLUSTER_NAMESPACE} rollout status ${SERVICE_TYPE} ${SERVICE_NAME} -w
            echo Restart complete
            kubectl -n ${CLUSTER_NAMESPACE} get pods | grep ${SERVICE_NAME}
            set +x
          done

