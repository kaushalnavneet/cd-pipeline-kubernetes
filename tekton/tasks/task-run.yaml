apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-base
spec:
  params:
    - name: source_directory
    - name: registryUrl
      default: us.icr.io
    - name: registryNamespace
      default: opentoolchain
    - name: registryRegion
      default: us-south
    - name: imageName
      default: ''
    - name: imageTag
    - name: imageUrl
    - name: buildCluster
      default: ''
    - name: dockerFile
    - name: dockerUsername
      default: iamapikey
    - name: runBaseImage
    - name: extraDockerOpts
      default: --no-cache
    - name: environment
      default: 'development'
    - name: artifactoryTokenBase64
      default: ''
    - name: artifactoryId
      default: ''
    - name: consoleAuthToken
      default: ''
    - name: icd-redis-store
      default: ''
    - name: qr-store
      default: ''
    - name: node-user-password
      default: ''
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: DOCKER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: API_KEY_1308775
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: BUILD_CLUSTER_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
      - name: IDS_USER
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IDS_USER
      - name: IDS_TOKEN
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: IDS_TOKEN
  workspaces:
  - name: task-pvc
    mountPath: /workspace 
  steps:
  - name: run-base
    image: $(params.runBaseImage)
    imagePullPolicy: IfNotPresent
    env:
      - name: HOME
        value: "/root"
      - name: IMAGE_NAME
        value: $(params.imageName)
      - name: IMAGE_TAG
        value: $(params.imageTag)
      - name: APPLICATION_VERSION
        value: $(params.imageTag)
      - name: IMAGE_URL
        value: $(params.imageUrl)
      - name: REGISTRY_URL
        value: $(params.registryUrl)
      - name: REGISTRY_NAMESPACE
        value: $(params.registryNamespace)
      - name: REGISTRY_REGION
        value: $(params.registryRegion)
      - name: SOURCE_DIRECTORY
        value: $(params.source_directory)
      - name: DOCKERFILE
        value: $(params.dockerFile)
      - name: DOCKER_IMAGE
        value: $(params.runBaseImage)
      - name: DOCKER_USERNAME
        value: $(params.dockerUsername)
      - name: EXTRA_DOCKER_OPTS
        value: $(params.extraDockerOpts)
      - name: BUILD_CLUSTER
        value: $(params.buildCluster)
      - name: ENVIRONMENT
        value: $(params.environment)
      # used for pipeline-ui build
      - name: ARTIFACTORY_TOKEN_BASE64
        value: $(params.artifactoryTokenBase64)
      - name: ARTIFACTORY_ID
        value: $(params.artifactoryId)
      - name: CONSOLE_AUTH_TOKEN
        value: $(params.consoleAuthToken)
      # can we get rid of this?
      - name: OPERATOR_SDK
        value: ''
      - name: ICD_REDIS_STORE
        value: $(params.icd-redis-store)
      - name: QR_STORE
        value: $(params.qr-store)
      - name: NODE_USER_PASSWORD
        value: $(params.node-user-password)
    workingDir: /workspace
    volumeMounts:
      - mountPath: /var/run/
        name: dind-socket
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        cd "${SOURCE_DIRECTORY}"
        #[ -d /work ] && [ -d cd-pipeline-kubernetes ] && rm -rf cd-pipeline-kubernetes
        #[ -d /work ] && cp -a /work cd-pipeline-kubernetes
        ibmcloud config --check-version=false
        ibmcloud plugin install -f container-registry
        ibmcloud plugin install -f kubernetes-service
        ibmcloud login -a ${API} -r ${REGISTRY_REGION} --apikey ${BUILD_CLUSTER_KEY}
        
        IMAGE_URL=${IMAGE_URL:-${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}}
        COMPONENT_NAME=${COMPONENT_NAME:-${IMAGE_URL##*/}}
        DOCKERFILE=${DOCKERFILE:-cd-pipeline-kubernetes/docker/Dockerfile.${DOCKER_IMAGE##*:}}
        [ -f build.properties ] && source build.properties

        if [ ! -z "$BUILD_CLUSTER" ]; then
          echo "Building using cluster ${BUILD_CLUSTER}"
          ibmcloud ks cluster config --cluster ${BUILD_CLUSTER}

          kubectl --namespace otc-dev get pods 
          kubectl --namespace otc-dev port-forward $(kubectl --namespace otc-dev get pods | grep docker | grep Running | awk '{print $1;}') 2375:2375 > /dev/null 2>&1 &

          while ! nc -z localhost 2375; do   
            sleep 0.1
          done

          export DOCKER_HOST='tcp://localhost:2375'
        else
          echo "Building using local Docker"
        fi

        TIMESTAMP=$(date +%Y%m%d%H%M%Z)
        if [ -z "$GIT_COMMIT" ]; then
          GIT_COMMIT=$(git rev-parse --verify HEAD)
        fi

        if [ -z "$APPLICATION_VERSION" ]; then
          APPLICATION_VERSION="${GIT_COMMIT}-${TIMESTAMP}"
        fi
        echo ${APPLICATION_VERSION} > /workspace/appVersion
        echo "Building ${IMAGE_URL}:${APPLICATION_VERSION}"
        echo ${APPLICATION_VERSION} > .pipeline_build_id
        echo "{\"build\": \"$TIMESTAMP\",\"commit\":\"$GIT_COMMIT\",\"appName\" : \"${COMPONENT_NAME}\",\"platform\" : \"Armada\"}" > build_info.json
        
        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${IMAGE_URL%%/*}
        # For some reason this doesn't get repulled in docker engine
        docker pull ${DOCKER_IMAGE}
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker pull command\"
            exit 1
        fi

        echo "Dockerfile: ${DOCKERFILE}"
        if [ "$OPERATOR_SDK" == true ]; then
          operator-sdk build ${IMAGE_URL}:${APPLICATION_VERSION}
        else 
          docker build . ${EXTRA_DOCKER_OPTS} -t ${IMAGE_URL}:${APPLICATION_VERSION} -f ${DOCKERFILE} --build-arg \
            COMPONENT=${COMPONENT_NAME} --build-arg DEVELOPMENT=false --build-arg IDS_USER=${IDS_USER} --build-arg IDS_TOKEN=${IDS_TOKEN}  \
            --build-arg "ARTIFACTORY_TOKEN_BASE64=${ARTIFACTORY_TOKEN_BASE64}" --build-arg "ARTIFACTORY_ID=${ARTIFACTORY_ID}" \
            --build-arg "CONSOLE_AUTH_TOKEN=${CONSOLE_AUTH_TOKEN}" --build-arg "ICD_REDIS_STORE=${ICD_REDIS_STORE}" \
            --build-arg "QR_STORE=${QR_STORE}" --build-args "NODE_USER_PASSWORD=${NODE_USER_PASSWORD}"
        fi
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker build command\"
            exit 1
        fi

        docker tag ${IMAGE_URL}:${APPLICATION_VERSION} ${IMAGE_URL}:latest
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker tag command\"
            exit 1
        fi

        docker push ${IMAGE_URL}:${APPLICATION_VERSION}
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker push command\"
            exit 1
        fi

        docker push ${IMAGE_URL}:latest
  sidecars:
    - image: docker:dind
      name: server
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/docker
          name: dind-storage
        - mountPath: /var/run/
          name: dind-socket
  volumes:
    - name: dind-storage
      emptyDir: {}
    - name: dind-socket
      emptyDir: {}
