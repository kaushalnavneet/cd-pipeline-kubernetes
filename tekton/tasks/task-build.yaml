apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-base
spec:
  params:
    - name: source-directory
    - name: registry-url
      default: us.icr.io
    - name: registry-namespace
      default: opentoolchain
    - name: registry-region
      default: us-south
    - name: image-name
    - name: image-tag
    - name: tag-suffix
      default: '.build'
    - name: environment
      default: 'development'
    - name: extra-docker-opts
      default: '--no-cache'
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: API_KEY_1308775
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
  workspaces:
  - name: task-pvc
    mountPath: /workspace 
  steps:
  - name: build-base
    image: ibmcom/pipeline-base-image:2.8
    imagePullPolicy: Always
    env:
      - name: HOME
        value: /root
      - name: IMAGE_NAME
        value: $(params.image-name)
      - name: IMAGE_TAG
        value: $(params.image-tag)
      - name: TAG_SUFFIX
        value: $(params.tag-suffix)
      - name: REGISTRY_URL
        value: $(params.registry-url)
      - name: REGISTRY_NAMESPACE
        value: $(params.registry-namespace)
      - name: REGISTRY_REGION
        value: $(params.registry-region)
      - name: SOURCE_DIRECTORY
        value: $(params.source-directory)
      - name: ENVIRONMENT
        value: $(params.environment)
      - name: EXTRA_DOCKER_OPTS
        value: $(params.extra-docker-opts)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        cd "${SOURCE_DIRECTORY}"
        ibmcloud config --check-version=false
        ibmcloud plugin install -f container-registry
        ibmcloud login -a ${API} -r ${REGISTRY_REGION} --apikey ${API_KEY}
        ibmcloud cr info

        echo -e "Build environment variables:"
        echo "REGISTRY_URL=${REGISTRY_URL}"
        echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
        echo "IMAGE_NAME=${IMAGE_NAME}"
        echo "IMAGE_TAG=${IMAGE_TAG}"
      
        echo "=========================================================="
        echo "Checking for Dockerfile at the root of ${SOURCE_DIRECTORY}"
        DOCKERFILE=docker/Dockerfile.${IMAGE_TAG}${TAG_SUFFIX}
        if [ -f ${DOCKERFILE} ]; then 
          echo "Dockerfile found"
        else
            echo "Dockerfile not found"
            exit 1
        fi

        echo "=========================================================="

        echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
        NS=$( ibmcloud cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
        if [ -z "${NS}" ]; then
            echo "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
            ibmcloud cr namespace-add ${REGISTRY_NAMESPACE}
            echo "Registry namespace ${REGISTRY_NAMESPACE} created."
        else 
            echo "Registry namespace ${REGISTRY_NAMESPACE} found."
        fi
        echo "=========================================================="
        echo -e "Building container image: ${IMAGE_NAME}:${IMAGE_TAG}"
        set -x
        ibmcloud cr build -f ${DOCKERFILE} ${EXTRA_DOCKER_OPTS} -t ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG} .
        set +x
        ibmcloud cr image-inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}
