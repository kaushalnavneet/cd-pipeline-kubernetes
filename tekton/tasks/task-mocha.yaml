apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-mocha
spec:
  params:
    - name: task-pvc
      description: the output pvc - this is where the cloned repository will be stored
    - name: source_directory
    - name: registryUrl
      default: us.icr.io
    - name: registryNamespace
      default: opentoolchain
    - name: registryRegion
      default: us-south
    - name: imageName
      default: ''
    - name: imageTag
    - name: imageUrl
    - name: buildCluster
      default: otc-dal12-build
    - name: dockerFile
    - name: dockerUsername
      default: iamapikey
    - name: runBaseImage
    - name: extraDockerOpts
      default: --no-cache
    - name: environment
      default: 'development'
    - name: artifactoryTokenBase64
      default: ''
    - name: artifactoryId
      default: ''
    - name: consoleAuthToken
      default: ''
    - name: skipMocha
      default: 'true'
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: DOCKER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: API_KEY_1308775
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: BUILD_CLUSTER_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
      - name: IDS_USER
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IDS_USER
      - name: IDS_TOKEN
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: IDS_TOKEN
  steps:
  - name: run-base
    image: $(params.runBaseImage)
    imagePullPolicy: Always
    env:
      - name: HOME
        value: "/root"
      - name: IMAGE_NAME
        value: $(params.imageName)
      - name: IMAGE_TAG
        value: $(params.imageTag)
      - name: APPLICATION_VERSION
        value: $(params.imageTag)
      - name: IMAGE_URL
        value: $(params.imageUrl)
      - name: REGISTRY_URL
        value: $(params.registryUrl)
      - name: REGISTRY_NAMESPACE
        value: $(params.registryNamespace)
      - name: REGISTRY_REGION
        value: $(params.registryRegion)
      - name: SOURCE_DIRECTORY
        value: $(params.source_directory)
      - name: DOCKERFILE
        value: $(params.dockerFile)
      - name: DOCKER_IMAGE
        value: $(params.runBaseImage)
      - name: DOCKER_USERNAME
        value: $(params.dockerUsername)
      - name: EXTRA_DOCKER_OPTS
        value: $(params.extraDockerOpts)
      - name: BUILD_CLUSTER
        value: $(params.buildCluster)
      - name: ENVIRONMENT
        value: $(params.environment)
      # used for pipeline-ui build
      - name: ARTIFACTORY_TOKEN_BASE64
        value: $(params.artifactoryTokenBase64)
      - name: ARTIFACTORY_ID
        value: $(params.artifactoryId)
      - name: CONSOLE_AUTH_TOKEN
        value: $(params.consoleAuthToken)
      # can we get rid of this?
      - name: OPERATOR_SDK
        value: ''
      - name: SKIP
        value: $(params.skipMocha)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        if [ "${SKIP}" == true ]; then
          echo "Skipping Mocha tests"
          exit 0
        fi
        cd "${SOURCE_DIRECTORY}"
        if [ -s /work/component/dependenciesResolver.sh ] ; then sh /work/component/dependenciesResolver.sh ; fi
        npm install -f
        if [ -s /work/component/extraSteps.sh ] ; then sh /work/component/extraSteps.sh ; fi
        npm list
        npm test

    volumeMounts:
      - mountPath: /workspace
        name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(params.task-pvc)
