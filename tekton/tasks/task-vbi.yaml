apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-vbi
spec:
  params:
    - name: buildCluster
      default: otc-dal12-build
    - name: dockerFile
    - name: extraDockerOpts
      default: --no-cache
    - name: dockerUsername
    - name: registryRegion
      default: us-south
    - name: registryScope
      default: 'global'
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: DOCKER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: DOCKER_PASSWORD
      - name: API_KEY_1308775
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: BUILD_CLUSTER_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
      - name: IDS_USER
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IDS_USER
      - name: IMAGE_NAME
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IMAGE_NAME
      - name: IMAGE_TAG
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IMAGE_TAG
      - name: IDS_TOKEN
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: IDS_TOKEN
  workspaces:
  - name: task-pvc
    mountPath: /workspace
  steps:
  - name: run-base
    image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.9
    imagePullPolicy: IfNotPresent
    env:
      - name: HOME
        value: "/root"
      - name: DOCKERFILE
        value: $(params.dockerFile)
      - name: DOCKER_USERNAME
        value: $(params.dockerUsername)
      - name: EXTRA_DOCKER_OPTS
        value: $(params.extraDockerOpts)
      - name: REGISTRY_REGION
        value: $(params.registryRegion)
      - name: DOCKER_HOST
        value: "unix:///var/run/docker.sock"
      - name: REGISTRY_SCOPE
        value: $(params.registryScope)
    workingDir: /workspace
    volumeMounts:
      - mountPath: /var/run/
        name: dind-socket
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        ibmcloud config --check-version=false
        ibmcloud plugin update --all -f
        
        DOCKER_VERSION=19.03.9
        curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz | tar zxvf - --strip-components 1 -C /usr/bin docker/docker

        DOCKERFILE=${DOCKERFILE}

        echo "Building using local Docker"

        echo "Dockerfile: ${DOCKERFILE}"
        docker build . ${EXTRA_DOCKER_OPTS} -t ${IMAGE_NAME}:${IMAGE_TAG} -f ${DOCKERFILE}

        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker build command\"
            exit 1
        fi

        docker login --username ${DOCKER_USERNAME} --password ${DOCKER_PASSWORD}
        docker push ${IMAGE_NAME}:${IMAGE_TAG}
        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
        docker push ${IMAGE_NAME}:latest
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker push command\"
            exit 1
        fi

        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker push command for latest tag\"
            exit 1
        fi

        ibmcloud config --check-version=false
        ibmcloud plugin install -f container-registry
        ibmcloud login -a ${API} -r ${REGISTRY_REGION} --apikey ${API_KEY}
        ibmcloud cr region-set ${REGISTRY_SCOPE}
  
        ibmcloud cr login
        docker tag ${IMAGE_NAME}:latest icr.io/continuous-delivery/pipeline/pipeline-base-image:latest
        docker tag ${IMAGE_NAME}:latest icr.io/continuous-delivery/pipeline/pipeline-base-image:${IMAGE_TAG}

        docker push icr.io/continuous-delivery/pipeline/pipeline-base-image:${IMAGE_TAG}
        docker push icr.io/continuous-delivery/pipeline/pipeline-base-image:latest
  sidecars:
    - image: docker:19-dind
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      args:
      - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then 
          apk add e2fsprogs && 
          truncate -s 20G /tmp/disk.img && 
          mkfs.ext4 /tmp/disk.img && 
          mount /tmp/disk.img /var/lib/docker; fi &&
        dockerd-entrypoint.sh --mtu=1400 --host=unix:///var/run/docker.sock;
      volumeMounts:
        - mountPath: /var/run/
          name: dind-socket
  volumes:
    - name: dind-socket
      emptyDir: {}