apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-vbi
spec:
  params:
    - name: buildCluster
      default: otc-dal12-build
    - name: dockerFile
    - name: extraDockerOpts
      default: --no-cache
    - name: dockerUsername
    - name: registryRegion
      default: us-south
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: DOCKER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: DOCKER_PASSWORD
      - name: API_KEY_1308775
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: BUILD_CLUSTER_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
      - name: IDS_USER
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IDS_USER
      - name: IMAGE_NAME
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IMAGE_NAME
      - name: IMAGE_TAG
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IMAGE_TAG
      - name: IDS_TOKEN
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: IDS_TOKEN
  workspaces:
  - name: task-pvc
    mountPath: /workspace
  steps:
  - name: run-base
    image: ibmcom/pipeline-base-image:2.8
    imagePullPolicy: IfNotPresent
    env:
      - name: HOME
        value: "/root"
      - name: DOCKERFILE
        value: $(params.dockerFile)
      - name: DOCKER_USERNAME
        value: $(params.dockerUsername)
      - name: EXTRA_DOCKER_OPTS
        value: $(params.extraDockerOpts)
      - name: REGISTRY_REGION
        value: $(params.registryRegion)
    workingDir: /workspace
    volumeMounts:
      - mountPath: /var/run/
        name: dind-socket
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        ibmcloud config --check-version=false
        ibmcloud plugin update --all -f

        apt-get update -y
        DEBIAN_FRONTEND=noninteractive apt-get install -y apt-utils apt-transport-https ca-certificates curl software-properties-common python-software-properties xz-utils bzip2 build-essential
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        apt-get update && apt-get upgrade -y
        DEBIAN_FRONTEND=noninteractive apt-get install -y ant maven zip docker-ce=5:18.09.9~3-0~ubuntu-xenial docker-ce-cli=5:18.09.9~3-0~ubuntu-xenial wget netcat-openbsd python make

        DOCKERFILE=${DOCKERFILE}

        if [ ! -z "$BUILD_CLUSTER" ]; then
          ibmcloud login -a ${API} -r ${REGISTRY_REGION}  --apikey ${BUILD_CLUSTER_KEY}
          echo "Building using cluster ${BUILD_CLUSTER}"
          ibmcloud ks cluster config --cluster ${BUILD_CLUSTER}

          kubectl --namespace otc-dev get pods 
          kubectl --namespace otc-dev port-forward $(kubectl --namespace otc-dev get pods | grep docker | grep Running | awk '{print $1;}') 2375:2375 > /dev/null 2>&1 &

          while ! nc -z localhost 2375; do   
            sleep 0.1
          done

          export DOCKER_HOST='tcp://localhost:2375'
        else
          echo "Building using local Docker"
        fi

        echo "Dockerfile: ${DOCKERFILE}"
        docker build . ${EXTRA_DOCKER_OPTS} -t ${IMAGE_NAME}:${IMAGE_TAG} -f ${DOCKERFILE}

        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker build command\"
            exit 1
        fi

        exit 0
        docker login --username ${DOCKER_USERNAME} --password ${DOCKER_PASSWORD}
        docker push ${IMAGE_NAME}:${IMAGE_TAG}
        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
        docker push ${IMAGE_NAME}:latest
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker push command\"
            exit 1
        fi

        docker push ${IMAGE_NAME}:latest
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker push command for latest tag\"
            exit 1
        fi
  sidecars:
    - image: docker:dind
      name: server
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/docker
          name: dind-storage
        - mountPath: /var/run/
          name: dind-socket
  volumes:
    - name: dind-storage
      emptyDir: {}
    - name: dind-socket
      emptyDir: {}