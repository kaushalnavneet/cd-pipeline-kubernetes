apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-vbi
spec:
  params:
    - name: build-cluster
      default: otc-dal12-build
    - name: docker-file
    - name: run-base-image
    - name: extra-docker-opts
      default: --no-cache
    - name: docker-username
    - name: registry-region
      default: us-south
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: DOCKER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: DOCKER_PASSWORD
      - name: API_KEY_1308775
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: BUILD_CLUSTER_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
      - name: IDS_USER
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IDS_USER
      - name: IMAGE_NAME
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IMAGE_NAME
      - name: IMAGE_TAG
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: IMAGE_TAG
      - name: IDS_TOKEN
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: IDS_TOKEN
  workspaces:
  - name: task-pvc
    mountPath: /workspace 
  steps:
  - name: run-base
    image: $(params.run-base-image)
    imagePullPolicy: Always
    env:
      - name: HOME
        value: "/root"
      - name: DOCKERFILE
        value: $(params.docker-file)
      - name: DOCKER_USERNAME
        value: $(params.docker-username)
      - name: EXTRA_DOCKER_OPTS
        value: $(params.extra-docker-opts)
      - name: BUILD_CLUSTER
        value: $(params.build-cluster)
      - name: REGISTRY_REGION
        value: $(params.registry-region)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        ibmcloud config --check-version=false
        ibmcloud plugin install -f container-registry
        ibmcloud plugin install -f kubernetes-service
        ibmcloud login -a ${API} -r ${REGISTRY_REGION}  --apikey ${BUILD_CLUSTER_KEY}
        
        IMAGE_URL=${IMAGE_NAME}:${IMAGE_TAG}
        DOCKERFILE=${DOCKERFILE}

        ibmcloud ks cluster config --cluster ${BUILD_CLUSTER}

        kubectl --namespace otc-dev get pods 
        kubectl --namespace otc-dev port-forward $(kubectl --namespace otc-dev get pods | grep docker | awk '{print $1;}') 2375:2375 > /dev/null 2>&1 &

        while ! nc -z localhost 2375; do   
          sleep 0.1
        done

        export DOCKER_HOST='tcp://localhost:2375'

        docker login --username ${DOCKER_USERNAME} --password ${DOCKER_PASSWORD}
        echo "Dockerfile: ${DOCKERFILE}"

        docker build . ${EXTRA_DOCKER_OPTS} -t ${IMAGE_NAME}:${IMAGE_TAG} -f ${DOCKERFILE}

        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker build command\"
            exit 1
        fi

        exit 0
        docker push ${IMAGE_NAME}:${IMAGE_TAG}
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker push command\"
            exit 1
        fi

        docker push ${IMAGE_NAME}:latest
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker push command for latest tag\"
            exit 1
        fi

