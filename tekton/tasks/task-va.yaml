apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-va
spec:
  params:
    - name: source_directory
    - name: registryUrl
      default: us.icr.io
    - name: registryNamespace
      default: opentoolchain
    - name: registryRegion
      default: us-south
    - name: imageName
      default: ''
    - name: imageTag
    - name: imageUrl
    - name: buildCluster
      default: otc-dal12-build
    - name: dockerFile
    - name: dockerUsername
      default: iamapikey
    - name: runBaseImage
    - name: extraDockerOpts
      default: --no-cache
    - name: environment
      default: 'development'
    - name: skipVA
      default: 'false'
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: DOCKER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: API_KEY_1308775
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: BUILD_CLUSTER_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY_1308775
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
  workspaces:
  - name: task-pvc
    mountPath: /workspace 
  steps:
  - name: run-va
    image: $(params.runBaseImage)
    imagePullPolicy: Always
    env:
      - name: HOME
        value: "/root"
      - name: IMAGE_NAME
        value: $(params.imageName)
      - name: APPLICATION_VERSION
        value: $(params.imageTag)
      - name: IMAGE_URL
        value: $(params.imageUrl)
      - name: REGISTRY_URL
        value: $(params.registryUrl)
      - name: REGISTRY_NAMESPACE
        value: $(params.registryNamespace)
      - name: REGISTRY_REGION
        value: $(params.registryRegion)
      - name: SOURCE_DIRECTORY
        value: $(params.source_directory)
      - name: SKIP
        value: $(params.skipVA)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        #set -e
        if [ "${SKIP}" == true ]; then
          echo "Skipping VA"
          exit 0
        fi
        cd "${SOURCE_DIRECTORY}"
        ibmcloud config --check-version=false
        ibmcloud plugin install -f container-registry
        ibmcloud login -a ${API} -r ${REGISTRY_REGION} --apikey ${DOCKER_PASSWORD}
        
        IMAGE_URL=${IMAGE_URL:-${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}}
        COMPONENT_NAME=${COMPONENT_NAME:-${IMAGE_URL##*/}}
        DOCKERFILE=${DOCKERFILE:-cd-pipeline-kubernetes/docker/Dockerfile.${DOCKER_IMAGE##*:}}
        [ -f build.properties ] && source build.properties

        if [[  -z "${APPLICATION_VERSION}" || "${APPLICATION_VERSION}" == "latest" ]]; then
          APPLICATION_VERSION=$( cat /workspace/appVersion )
          if [[  -z "${APPLICATION_VERSION}" || "${APPLICATION_VERSION}" == "latest" ]]; then
            ibmcloud cr images --restrict ${IMAGE_NAMESPACE}/${COMPONENT_NAME} > _allImages
            APPLICATION_VERSION=$(cat _allImages | grep $(cat _allImages | grep latest | awk '{print $3}') | grep -v latest | awk '{print $2}')
          fi
        fi

        export PIPELINE_IMAGE_URL="${IMAGE_URL}:${APPLICATION_VERSION}"
        echo "PIPELINE_IMAGE_URL=${PIPELINE_IMAGE_URL}"
        set -x

        for iteration in {1..30}
        do
          BX_CR_VA=$(ibmcloud cr va $PIPELINE_IMAGE_URL) 
          if [[ "${BX_CR_VA}" =~ SAFE ]] || [[ "${BX_CR_VA}" =~ CAUTION ]] || [[ "${BX_CR_VA}" =~ BLOCKED ]] || [[ "${BX_CR_VA}" =~ NO[[:space:]]ISSUES ]]; then
            break
          fi

          echo -e "A vulnerability report was not found for the specified image, either the image doesn't exist or the scan hasn't completed yet. Waiting for scan to complete.."
          sleep 10
        done

        echo "${BX_CR_VA}"
        if [[ ! "${BX_CR_VA}" =~ SAFE ]] && [[ ! "${BX_CR_VA}" =~ NO[[:space:]]ISSUES ]]; then
          echo "ERROR: The vulnerability scan was not successful, check the output of the command and try again."
          exit 1
        fi
        
