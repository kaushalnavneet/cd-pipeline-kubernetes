apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: top-node-check
spec:
  params:
    - name: clusterRegion
    - name: clusterName
    - name: skip
      default: 'false'
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: INTEGRATION_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: INTEGRATION_KEY   
  workspaces:
  - name: task-pvc
    mountPath: /workspace 
  steps:
  - name: top-node-checker
    image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12
    imagePullPolicy: IfNotPresent
    env:
      - name: REGION
        value: $(params.clusterRegion)
      - name: CLUSTER_NAME
        value: $(params.clusterName)
      - name: SKIP
        value: $(params.skip)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - |
        if [ "${SKIP}" == true ]; then
          echo "Skipping cluster"
          exit 0
        fi
        ibmcloud login --apikey ${API_KEY} -r ${REGION}

        set +e
        function cluster_config() {
            # 1 - cluster name
            for iteration in {1..30}
            do
                echo "Running cluster config for cluster $1: $iteration / 30"
                ibmcloud ks cluster config --cluster $1
                if [[ $? -eq 0 ]]; then
                    return 0
                else
                    echo "Cluster config for $1 failed. Trying again..."
                    sleep 5
                fi
            done
            return 1
        }
        cluster_config ${CLUSTER_NAME}
        ec=$?
        if [[ $ec != 0 ]]; then
          echo "Could not configure the cluster ${CLUSTER_NAME}"
          exit 1
        fi

        function check_top_node() {
            for iteration in {1..5}
            do
                echo "Running kubectl top node: $iteration / 5"
                kubectl top node
                if [[ $? -eq 0 ]]; then
                    return 0
                else
                    echo "kubectl top node failed. Trying again..."
                    sleep 5
                fi
            done
            return 1
        }


        check_top_node
        ec=$?
        if [[ $ec == 0 ]]; then
          echo "Command run successfully"
          echo $(kubectl top node)
        else
          echo "top node command failed: notify Pagerduty"
          source=$(ic ks cluster get --cluster ${CLUSTER_NAME} --output json | jq .id)
          if [ -z "${source}"  ]; then
            source = "unknown"
          fi
          echo "source=${source}"
          exit 1
          SUMMARY=$(printf "kubectl top node command failed on cluster %s" "${CLUSTER_NAME}")
          cat << EOF > body.json
          {
            "payload": {
              "summary": "${SUMMARY}",
              "severity": "critical",
              "source": "${source}"
            },
            "routing_key": "${INTEGRATION_KEY}",
            "event_action": "trigger"
          }
          EOF
          curl -X POST -H 'Content-type: application/json' -d @body.json https://events.pagerduty.com/v2/enqueue
        fi