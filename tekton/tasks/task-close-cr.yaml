apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: close-cr
spec:
  params:
    - name: source_directory
    - name: deployBaseImage
      default: us.icr.io/opentoolchain/cd-deploy-base:deploy
    - name: environment
      default: 'development'
    - name: snUrl
      default: 'https://watson.service-now.com'
    - name: deployClusters
      default: ''
    - name: deployChannel
      default: '#devops-otc-deployment'
    - name: tocChannel
      default: '#devops-cd-cie'
    - name: e2eToolchainId
      default: 'd5c0676c-55ed-4c25-b763-60b7afd64c87'
    - name: e2eApplication
      default: 'CD-OTC'
    - name: e2eBuildId
      default: ''
  stepTemplate:
    env:
      - name: PIPELINE_TRIGGERING_USER
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: API_KEY
      - name: SN_TOKEN
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: SN_TOKEN
      - name: SLACK_DEPLOY_HOOK
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: SLACK_DEPLOY_HOOK
      - name: SLACK_TOC_HOOK
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: SLACK_TOC_HOOK
  workspaces:
  - name: task-pvc
    mountPath: /workspace 
  steps:
  - name: close-cr
    image: $(params.deployBaseImage)
    imagePullPolicy: Always
    env:
      - name: HOME
        value: "/root"
      - name: DEPLOY_TARGET
        value: $(params.environment)
      - name: DEPLOY_CLUSTERS
        value: $(params.deployClusters)
      - name: SN_URL
        value: $(params.snUrl)
      - name: SOURCE_DIRECTORY
        value: $(params.source_directory)
      - name: ENVIRONMENT
        value: $(params.environment)
      - name: E2E_TOOLCHAIN_ID
        value: $(params.e2eToolchainId)
      - name: E2E_APPLICATION
        value: $(params.e2eApplication)
      - name: E2E_BUILD_ID
        value: $(params.e2eBuildId)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        set -x
        cd "${SOURCE_DIRECTORY}"
        mkdir -p cr/$ENVIRONMENT
        ID_FILE=cr/$ENVIRONMENT/cr_id
        if [ ! -r cr/$ENVIRONMENT/cr_id ]; then
          echo "No open CR for $ENVIRONMENT"
          exit 1
        fi
        CR_ID=$(cat $ID_FILE)
        
        DEPLOYS_FILE=cr/$ENVIRONMENT/deploys.csv
        cat cr/$ENVIRONMENT/*.csv > $DEPLOYS_FILE
        export TMP=/tmp/tmp_$$.txt

        if [[ "$PIPELINE_TRIGGERING_USER" =~ .+@.+\..+ && "$PIPELINE_TRIGGERING_USER" != "idsorg@us.ibm.com" ]]; then
            ASSIGNED_TO="$PIPELINE_TRIGGERING_USER"
        else
            ASSIGNED_TO="$(git log -1 --pretty=format:'%ae')"
        fi

        ibmcloud config --check-version=false
        ibmcloud login -a cloud.ibm.com -r us-south --apikey ${API_KEY}
        BEARER=$( ibmcloud iam oauth-tokens --output json | jq -r .iam_token )

        # download any logs from the deployment runs
        export TMP_LOGS=/tmp/logs.csv
        rm -f $TMP_LOGS
        [ -r "$DEPLOYS_FILE" ] && cat "$DEPLOYS_FILE" | cut -f5 -d, | sort -u | while read url ; do
          RUN=$( echo "$url" \
              | cut -f7-9 -d/ | cut -f1 -d\? )
          RUN_ID=$( echo "$RUN" | cut -f3 -d/ )
          curl -s "https://devops-api.us-south.devops.cloud.ibm.com/v1/tekton-pipelines/${RUN}"   \
                  -H  "accept: */*"   -H "Authorization: $BEARER" >/tmp/${RUN_ID}.json

          jq '.resources[] | select ( .kind == "TaskRun" ) | select ( .metadata.labels["tekton.dev/task"] == "deploy-chart" ) ' /tmp/${RUN_ID}.json >/tmp/t1.json


          jq -r '.spec.params[] | select ( .name == "clusterName" ).value' /tmp/t1.json \
          |  grep -v none | while read cluster; do
            echo Processing $cluster
            jq '. | select ( any(.spec.params[] ; .value == "'$cluster'" ) ) ' /tmp/t1.json >/tmp/t2.json
            COMPONENT=$( jq -r '.spec.params[] | select ( .name == "imageUrl" ).value' /tmp/t2.json | cut -f3 -d/ )
            echo For ${COMPONENT}:${cluster}
            LOG_ID=$( jq '.metadata.annotations["devops.cloud.ibm.com/tekton-logs"]' /tmp/t2.json | jq '. | fromjson ' | jq -r '.[]'  )
            curl -s "https://devops-api.us-south.devops.cloud.ibm.com/v1/tekton-pipelines/${RUN}/${LOG_ID}/logs"   \
                -H  "accept: */*"   -H "Authorization: $BEARER" >/tmp/${RUN_ID}-${COMPONENT}-${cluster}.log
            echo "$COMPONENT,$cluster,${RUN_ID},${RUN_ID}-${COMPONENT}-${cluster}.log" >>$TMP_LOGS
          done
        done

        # create log CTASKS
        [ -r "$TMP_LOGS" ] && cat "$TMP_LOGS" | while read csv_line ; do
          COMPONENT=$( echo "$csv_line" | cut -f1 -d, )
          CLUSTER=$( echo "$csv_line" | cut -f2 -d, )
          RUN_ID=$( echo "$csv_line" | cut -f3 -d, )
          FILE=$( echo "$csv_line" | cut -f4 -d, )

          SUMMARY=$( cat /tmp/"$FILE" |  python -c 'import json,sys; print(json.dumps(sys.stdin.read()))' )
          cat - >"$TMP" <<HERE
        {
          "required": "required",
          "system": "$SYSTEM",
          "shortdescription": "$COMPONENT:$CLUSTER logs",
          "description": "Deploy Logs for PipelineRun ${RUN_ID}\nComponent: $COMPONENT\nCluster: $CLUSTER\nEnvironment: $ENVIRONMENT",
          "data": $SUMMARY
        }
        HERE
          RESPONSE=$(curl --request POST -H "Authorization:Bearer $SN_TOKEN" \
              -H "updated_by: $ASSIGNED_TO" \
              -H "Accept:application/json" \
              -H "Content-Type:application/json" \
              --data "@$TMP" "$SN_URL/api/ibmwc/v2/change/$CR_ID/task/create" \
              --silent --show-error)

          CTASK_ID=$(jq --raw-output ".result.number | select (.!=null)" <<< "$RESPONSE")

          if [[ ! "$CTASK_ID" ]]; then
              echo "$RESPONSE"
              exit 1
          fi
          PAYLOAD=$(jq --null-input "$(cat <<HERE
        {
            state: "Closed"
        }
        HERE
          )")

          RESPONSE=$(curl --request PUT -H "Authorization:Bearer $SN_TOKEN" \
              -H "updated_by: $ASSIGNED_TO" \
              -H "Accept:application/json" \
              -H "Content-Type:application/json" \
              --data "$PAYLOAD" "$SN_URL/api/ibmwc/v2/change/$CR_ID/task/$CTASK_ID/update" \
              --silent --show-error)

          CTASK_ID=$(jq --raw-output ".result.number | select (.!=null)" <<< "$RESPONSE")

          if [[ ! "$CTASK_ID" ]]; then
              echo "$RESPONSE"
              exit 1
          fi
        done

        # create E2E test CTASK
        export SEARCH=umbrella-prod
        if [ "$ENVIRONMENT" = au-syd ]; then SEARCH=integration; E2E_APPLICATION=Pipeline; fi

        curl -s -X GET "https://dlms.us-south.devopsinsights.cloud.ibm.com/v3/toolchainids/$E2E_TOOLCHAIN_ID/buildartifacts/$E2E_APPLICATION/builds?limit=500" \
          -H  "accept: */*" \
          -H "Authorization: $BEARER" >/workspace/tmp_doi.json
        BUILD_ID=$( jq -r '.[].build_id' /workspace/tmp_doi.json | sort | grep "$SEARCH" | tail -1 )
        E2E_BUILD_ID=${E2E_BUILD_ID:-$BUILD_ID}
        SUMMARY=$( curl -s -X GET "https://dlms.us-south.devopsinsights.cloud.ibm.com/v3/toolchainids/$E2E_TOOLCHAIN_ID/buildartifacts/$E2E_APPLICATION/builds/$E2E_BUILD_ID/summaries?latest_only=true&environment_name=$ENVIRONMENT" \
          -H  "accept: */*" \
          -H "Authorization: $BEARER" | jq . | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))' )

        cat - >"$TMP" <<HERE
        {
          "required": "required",
          "system": "$SYSTEM",
          "shortdescription": "PROD test results for $ENVIRONMENT",
          "description": "Toolchain: $E2E_TOOLCHAIN_ID\nApplication: $E2E_APPLICATION\nBuild id: $E2E_BUILD_ID\nEnvironment: $ENVIRONMENT",
          "data": $SUMMARY
        }
        HERE
        RESPONSE=$(curl --request POST -H "Authorization:Bearer $SN_TOKEN" \
            -H "updated_by: $ASSIGNED_TO" \
            -H "Accept:application/json" \
            -H "Content-Type:application/json" \
            --data "@$TMP" "$SN_URL/api/ibmwc/v2/change/$CR_ID/task/create" \
            --silent --show-error)

        CTASK_ID=$(jq --raw-output ".result.number | select (.!=null)" <<< "$RESPONSE")

        if [[ ! "$CTASK_ID" ]]; then
            echo "$RESPONSE"
            exit 1
        fi
        PAYLOAD=$(jq --null-input "$(cat <<HERE
        {
            state: "Closed"
        }
        HERE
        )")

        RESPONSE=$(curl --request PUT -H "Authorization:Bearer $SN_TOKEN" \
            -H "updated_by: $ASSIGNED_TO" \
            -H "Accept:application/json" \
            -H "Content-Type:application/json" \
            --data "$PAYLOAD" "$SN_URL/api/ibmwc/v2/change/$CR_ID/task/$CTASK_ID/update" \
            --silent --show-error)

        CTASK_ID=$(jq --raw-output ".result.number | select (.!=null)" <<< "$RESPONSE")

        if [[ ! "$CTASK_ID" ]]; then
            echo "$RESPONSE"
            exit 1
        fi

        CR_CLOSE_CATEGORY=successful
        #CR_CLOSE_CATEGORY=unsuccessful

        echo "Closing ServiceNow change request..."

        cat - >"$TMP" <<HERE
        {
            "closecategory": "$CR_CLOSE_CATEGORY",
            "closenotes": "DEPLOYMENT finished.",
            "actualendtime": "now"
        }
        HERE

        RESPONSE=$(curl --request PUT -H "Authorization:Bearer $SN_TOKEN" \
            -H "Accept:application/json" \
            -H "Content-Type:application/json" \
            --data "@$TMP" "$SN_URL/api/ibmwc/change/$CR_ID/close" \
            --silent --show-error)

        RESULT=$(jq ".result | select (.!=null)" <<< "$RESPONSE")

        if [[ ! "$RESULT" ]]; then
            echo "$RESPONSE"
            exit 1
        fi

        echo "ServiceNow change request closed: $SN_URL/nav_to.do?uri=change_request.do?sysparm_query=number=$CR_ID"

        set +e
        git config --global user.email "idsorg@us.ibm.com"
        git config --global user.name "IDS Organization"
        git config --global push.default matching
        set +e
        git rm $ID_FILE
        rm -f "$DEPLOYS_FILE"
        git rm cr/$ENVIRONMENT/*.csv
        git commit -m "$CR_ID closed"
        n=0
        rc=0
        until [ $n -ge 5 ]
        do
          git push
          rc=$?
          if [[ $rc == 0 ]]; then 
            break;
          fi
          n=$[$n+1]
          git pull
        done
        set +x

  - name: notify-slack
    image: $(params.deployBaseImage)
    imagePullPolicy: Always
    env:
      - name: HOME
        value: "/root"
      - name: DEPLOY_TARGET
        value: $(params.environment)
      - name: DEPLOY_CLUSTERS
        value: $(params.deployClusters)
      - name: URL
        value: $(params.snUrl)
      - name: SOURCE_DIRECTORY
        value: $(params.source_directory)
      - name: ENVIRONMENT
        value: $(params.environment)
      - name: SLACK_DEPLOY_CHANNEL
        value: $(params.deployChannel)
      - name: SLACK_TOC_CHANNEL
        value: $(params.tocChannel)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        set -x
        cd "${SOURCE_DIRECTORY}"
        
        NOTICE_TEXT=${SN_CLOSE_NOTICE_TEXT:="The deployment in ${ENVIRONMENT} has concluded."}

        ICON=${SN_ICON:=":-cloud-:"}
        SLACK_USERNAME=${SN_SLACK_USERNAME:="Deployment Notification"}

        cat << EOF > message.json
        {
          "channel": "${SLACK_DEPLOY_CHANNEL}",
          "username": "${SLACK_USERNAME}",
          "icon_emoji": "${ICON}",
          "text": "${NOTICE_TEXT} \n\nThe TOC has been notified in the *#devops-cd-cie* channel."
        }
        EOF
        #Post to slack deployment channel
        curl -X POST -H "Content-Type: application/json" \
            -d @message.json \
            ${SLACK_DEPLOY_HOOK}

        #Post to swat channel. The <!subteam^S1SLXH3PE> string below sends the message to the user group @toc that the deployment has concluded
        cat << EOF > message.json
        {
          "channel": "${SLACK_TOC_CHANNEL}",
          "username": "${SLACK_USERNAME}",
          "icon_emoji": "${ICON}",
          "text": "<!subteam^S1SLXH3PE> : ${NOTICE_TEXT}"
        }
        EOF
        curl -X POST -H "Content-Type: application/json" \
            -d @message.json \
            ${SLACK_TOC_HOOK}
