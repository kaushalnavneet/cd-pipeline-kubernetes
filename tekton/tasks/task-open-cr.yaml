apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: open-cr
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc - this is where the cloned repository will be stored
      - name: source_directory
      - name: registryUrl
        default: us.icr.io
      - name: registryNamespace
        default: devopsotc
      - name: registryRegion
        default: us-south
      - name: imageName
        default: ''
      - name: imageTag
        default: ''
      - name: imageUrl
      - name: clusterName
        default: otc-us-south-dev
      - name: clusterNamespace
        default: opentoolchain
      - name: deployBaseImage
        default: us.icr.io/opentoolchain/cd-deploy-base:deploy
      - name: environment
        default: 'development'
      - name: skipDeploy
        default: 'false'
      - name: snUrl
        default: 'https://watson.service-now.com'
      - name: deployClusters
        default: ''
      - name: deployChannel
        default: '#devops-otc-deployment'
      - name: tocChannel
        default: '#devops-cd-cie'
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: DEPLOY_API_KEY
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
      - name: SN_TOKEN
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: SN_TOKEN
      - name: SLACK_DEPLOY_HOOK
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: SLACK_DEPLOY_HOOK
      - name: SLACK_TOC_HOOK
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: SLACK_TOC_HOOK
  steps:
  - name: open-cr
    image: $(inputs.params.deployBaseImage)
    imagePullPolicy: Always
    env:
      - name: HOME
        value: "/root"
      - name: IMAGE_NAME
        value: $(inputs.params.imageName)
      - name: DEPLOY_TARGET
        value: $(inputs.params.environment)
      - name: DEPLOY_CLUSTERS
        value: $(inputs.params.deployClusters)
      - name: APPLICATION_VERSION
        value: $(inputs.params.imageTag)
      - name: IMAGE_URL
        value: $(inputs.params.imageUrl)
      - name: SN_URL
        value: $(inputs.params.snUrl)
      - name: REGISTRY_URL
        value: $(inputs.params.registryUrl)
      - name: REGISTRY_NAMESPACE
        value: $(inputs.params.registryNamespace)
      - name: REGISTRY_REGION
        value: $(inputs.params.registryRegion)
      - name: SOURCE_DIRECTORY
        value: $(inputs.params.source_directory)
      - name: CLUSTER_NAME
        value: $(inputs.params.clusterName)
      - name: CLUSTER_NAMESPACE
        value: $(inputs.params.clusterNamespace)
      - name: ENVIRONMENT
        value: $(inputs.params.environment)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        set -x
        cd "${SOURCE_DIRECTORY}"
        mkdir -p cr/$ENVIRONMENT
        ID_FILE=cr/$ENVIRONMENT/cr_id
        if [ -r cr/$ENVIRONMENT/cr_id ]; then
          echo "Already a CR open for $ENVIRONMENT"
          exit 1
        fi
        
        IMAGE_URL=${IMAGE_URL:-${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}}
        COMPONENT_NAME=${COMPONENT_NAME:-${IMAGE_URL##*/}}
        APP_NAME="${COMPONENT_NAME}"

        #APP_NAME="${APP_NAME:-$(yq --raw-output ".name" */Chart.yaml)}"

        SYSTEM="continuous-delivery"
        CRN="crn:v1:bluemix:public::$ENVIRONMENT::::"
        PURPOSE="Continuous Delivery deployment of $APP_NAME to public environment ($DEPLOY_TARGET: $DEPLOY_CLUSTERS)."

        DEPLOY_PACKAGE="https://github.ibm.com/org-ids/pipeline-config/tree/$(git rev-parse HEAD)"

        if [[ "$PIPELINE_TRIGGERING_USER" =~ .+@.+\..+ && "$PIPELINE_TRIGGERING_USER" != "idsorg@us.ibm.com" ]]; then
            ASSIGNED_TO="$PIPELINE_TRIGGERING_USER"
        else
            ASSIGNED_TO="$(git log -1 --pretty=format:'%ae')"
        fi

        # tag message adds link to ServiceNow query using deploy commit hash in the description field
        PAYLOAD=$(jq --null-input "$(cat <<HERE
        {
            assignedto: "$ASSIGNED_TO",
            system: "$SYSTEM",
            impact: "N/A",
            outageduration: "0 00:00:00",
            priority: "moderate",
            environment: "$CRN",
            purpose: "$PURPOSE",
            description: "$PURPOSE\nDescription/Plan: $DEPLOY_PACKAGE",
            backoutplan: "Revert changes and re-deploy.",
            plannedstart: "$(date -u "+%Y-%m-%d %H:%M:%S")",
            plannedend: "$(date -u -d '+15mins' "+%Y-%m-%d %H:%M:%S")", 
            deploymentready: "yes",
            type: "standard"
        }
        HERE
        )")

        RESPONSE=$(curl --request POST -H "Authorization:Bearer $SN_TOKEN" \
            -H "Accept:application/json" \
            -H "Content-Type:application/json" \
            --data "$PAYLOAD" "$SN_URL/api/ibmwc/change/create" \
            --silent --show-error)

        CR_ID=$(jq --raw-output ".result.number | select (.!=null)" <<< "$RESPONSE")

        if [[ ! "$CR_ID" ]]; then
            echo "$RESPONSE"
            exit 1
        fi

        echo "ServiceNow change request opened: $SN_URL/nav_to.do?uri=change_request.do?sysparm_query=number=$CR_ID"
        echo $CR_ID > $ID_FILE
        git add -A $ID_FILE
        git commit -m "${PURPOSE}"

        n=0
        rc=0
        ORIG_DIR=$(pwd)
        until [ $n -ge 5 ]
        do
          git push
          rc=$?
          if [[ $rc == 0 ]]; then 
            break;
          fi
          n=$[$n+1]
          git pull
        done

        echo "Checking ServiceNow change request state..."

        RESPONSE=$(curl -H "Authorization:Bearer $SN_TOKEN" \
            -H "Accept:application/json" \
            -H "Content-Type:application/json" \
            "$SN_URL/api/ibmwc/change/$CR_ID/read" \
            --silent --show-error)

        CR_STATE=$(jq --raw-output ".result.state | select (.!=null)" <<< "$RESPONSE")

        if [[ ! "$CR_STATE" ]]; then
            echo "$RESPONSE"
            exit 1
        fi

        if [[ "$CR_STATE" == "Scheduled" ]]; then
            echo "ServiceNow change request is in 'Scheduled' state."
        else
            echo "ServiceNow change request is not in 'Scheduled' state (state: $CR_STATE)"
            exit 1
        fi
        
        set +x

    volumeMounts:
      - mountPath: /workspace
        name: task-volume
  - name: notify-slack
    image: $(inputs.params.deployBaseImage)
    imagePullPolicy: Always
    env:
      - name: HOME
        value: "/root"
      - name: IMAGE_NAME
        value: $(inputs.params.imageName)
      - name: DEPLOY_TARGET
        value: $(inputs.params.environment)
      - name: DEPLOY_CLUSTERS
        value: $(inputs.params.deployClusters)
      - name: URL
        value: $(inputs.params.snUrl)
      - name: APPLICATION_VERSION
        value: $(inputs.params.imageTag)
      - name: IMAGE_URL
        value: $(inputs.params.imageUrl)
      - name: REGISTRY_URL
        value: $(inputs.params.registryUrl)
      - name: REGISTRY_NAMESPACE
        value: $(inputs.params.registryNamespace)
      - name: REGISTRY_REGION
        value: $(inputs.params.registryRegion)
      - name: SOURCE_DIRECTORY
        value: $(inputs.params.source_directory)
      - name: CLUSTER_NAME
        value: $(inputs.params.clusterName)
      - name: CLUSTER_NAMESPACE
        value: $(inputs.params.clusterNamespace)
      - name: ENVIRONMENT
        value: $(inputs.params.environment)
      - name: SLACK_DEPLOY_CHANNEL
        value: $(inputs.params.deployChannel)
      - name: SLACK_TOC_CHANNEL
        value: $(inputs.params.tocChannel)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        set -x
        cd "${SOURCE_DIRECTORY}"
        ID_FILE=cr/$ENVIRONMENT/cr_id
        SN_TICKET_ID=$(<$ID_FILE)
        
        IMAGE_URL=${IMAGE_URL:-${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}}
        COMPONENT_NAME=${COMPONENT_NAME:-${IMAGE_URL##*/}}
        APP_NAME="${COMPONENT_NAME}"
        SYSTEM="continuous-delivery"
        CRN="crn:v1:bluemix:public::$ENVIRONMENT::::"
        NOTICE_TEXT="Continuous Delivery deployment of $APP_NAME to public environment ($DEPLOY_TARGET: $DEPLOY_CLUSTERS)."

        ICON=${SN_ICON:=":-cloud-:"}
        SLACK_USERNAME=${SN_SLACK_USERNAME:="Deployment Notification"}

        cat << EOF > message.json
        {
          "channel": "${SLACK_DEPLOY_CHANNEL}",
          "text": "${NOTICE_TEXT}",
          "username": "${SLACK_USERNAME}", 
          "icon_emoji": "${ICON}",
          "attachments": [
            {
              "title": "ServiceNow",
              "type": "mrkdwn",
              "text": "ChangeRequest ticket opened: <${URL}/nav_to.do?uri=change_request.do?sysparm_query=number=${SN_TICKET_ID}|${SN_TICKET_ID}>"
            }
          ]
        }
        EOF

        curl -X POST -H "Content-Type: application/json" \
            -d @message.json \
            ${SLACK_DEPLOY_HOOK}

        cat << EOF > message.json
        {
          "channel": "${SLACK_TOC_CHANNEL}",
          "text": "<!subteam^S1SLXH3PE> : ${NOTICE_TEXT}",
          "username": "${SLACK_USERNAME}", 
          "icon_emoji": "${ICON}",
          "attachments": [
            {
              "title": "ServiceNow",
              "type": "mrkdwn",
              "text": "ChangeRequest ticket opened: <${URL}/nav_to.do?uri=change_request.do?sysparm_query=number=${SN_TICKET_ID}|${SN_TICKET_ID}>"
            }
          ]
        }
        EOF
        #Post to devops-cd-cie channel. The <!subteam^S1SLXH3PE> string below sends the message to the user group @toc 
        curl -X POST -H "Content-Type: application/json" \
            -d @message.json \
            ${SLACK_TOC_HOOK}

    volumeMounts:
      - mountPath: /workspace
        name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
