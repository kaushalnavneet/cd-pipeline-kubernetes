apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-chart
spec:
  params:
    - name: source_directory
    - name: registryUrl
      default: us.icr.io
    - name: registryNamespace
      default: devopsotc
    - name: registryRegion
      default: us-south
    - name: imageName
      default: ''
    - name: imageTag
      default: ''
    - name: imageUrl
    - name: clusterName
      default: otc-us-south-dev
    - name: clusterNamespace
      default: opentoolchain
    - name: deployBaseImage
      default: us.icr.io/opentoolchain/cd-deploy-base:deploy
    - name: environment
      default: 'development'
    - name: skipDeploy
      default: 'false'
  stepTemplate:
    env:
      - name: PIPELINE_RUN_URL
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: DEPLOY_API_KEY
      - name: REGISTRY_API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: REGISTRY_API_KEY
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
  workspaces:
  - name: task-pvc
    mountPath: /workspace 
  steps:
  - name: deploy
    image: $(params.deployBaseImage)
    imagePullPolicy: Always
    env:
      - name: HOME
        value: "/root"
      - name: IMAGE_NAME
        value: $(params.imageName)
      - name: APPLICATION_VERSION
        value: $(params.imageTag)
      - name: IMAGE_URL
        value: $(params.imageUrl)
      - name: REGISTRY_URL
        value: $(params.registryUrl)
      - name: REGISTRY_NAMESPACE
        value: $(params.registryNamespace)
      - name: REGISTRY_REGION
        value: $(params.registryRegion)
      - name: SOURCE_DIRECTORY
        value: $(params.source_directory)
      - name: SKIP
        value: $(params.skipDeploy)
      - name: CLUSTER_NAME
        value: $(params.clusterName)
      - name: CLUSTER_NAMESPACE
        value: $(params.clusterNamespace)
      - name: ENVIRONMENT
        value: $(params.environment)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        if [ "${SKIP}" == true ]; then
          echo "Skipping Deploy for $CLUSTER_NAME"
          exit 0
        fi
        cd "${SOURCE_DIRECTORY}"
        WORKDIR=${WORKDIR:-/work}
        VALUES_OPT=""

        if [ -z "$REGISTRY_API_KEY" ]; then
          REGISTRY_API_KEY=$API_KEY
        fi
        ibmcloud config --check-version=false
        ibmcloud plugin install -f container-service
        echo "Logging in to us.icr.io"
        ibmcloud login -a ${API} -r ${REGISTRY_REGION} --apikey ${REGISTRY_API_KEY}
        
        IMAGE_URL=${IMAGE_URL:-${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}}
        COMPONENT_NAME=${COMPONENT_NAME:-${IMAGE_URL##*/}}

        if [[  -z "${APPLICATION_VERSION}" || "${APPLICATION_VERSION}" == "latest" ]]; then
          [ -r /workspace/appVersion ] && APPLICATION_VERSION=$( cat /workspace/appVersion )
          if [[  -z "${APPLICATION_VERSION}" || "${APPLICATION_VERSION}" == "latest" ]]; then
            ibmcloud cr images --restrict ${REGISTRY_NAMESPACE}/${COMPONENT_NAME} > _allImages
            APPLICATION_VERSION=$(cat _allImages | grep $(cat _allImages | grep latest | awk '{print $3}') | grep -v latest | awk '{print $2}')
          fi
        fi

        printf "Deploying release ${COMPONENT_NAME} into cluster ${CLUSTER_NAME},\nnamespace ${CLUSTER_NAMESPACE},\nwith image: ${IMAGE_URL}:${APPLICATION_VERSION}.\n"

        echo Current Directory: $(pwd)

        echo Logging into Deployment account
        ibmcloud login --apikey ${API_KEY} -r ${REGION}

        ibmcloud ks cluster config  --cluster ${CLUSTER_NAME} --skip-rbac

        INGRESS_SUBDOMAIN=$(ibmcloud ks cluster get -s --cluster ${CLUSTER_NAME} | grep -i "Ingress subdomain:" | awk '{print $3;}')
        echo "INGRESS SUB DOMAIN: $INGRESS_SUBDOMAIN"
        if [[ ${INGRESS_SUBDOMAIN} == *,* ]];then
          INGRESS_SUBDOMAIN=$(echo "$INGRESS_SUBDOMAIN" | cut -d',' -f1)
          echo "INGRESS SUB DOMAIN: $INGRESS_SUBDOMAIN"
        fi

        INGRESS_SECRET=$(ibmcloud ks cluster get -s --cluster ${CLUSTER_NAME} | grep -i "Ingress secret:" | awk '{print $3;}')
        if [[ ${INGRESS_SECRET} == *,* ]];then
          INGRESS_SECRET=$(echo "$INGRESS_SECRET" | cut -d',' -f1)
          echo "INGRESS SECRET: $INGRESS_SECRET"
        fi

        CHART_PATH=$( ls -v charts/"${COMPONENT_NAME}"*.tgz |  tail -n 1 )
        echo Expanding "$CHART_PATH"
        if [ ! -e tmp/${COMPONENT_NAME} ]; then
          mkdir -p tmp ; cd tmp
          tar zxf ../$CHART_PATH
          cd ..
          # pick up the environment values fresh if available
          echo "component name=${COMPONENT_NAME}"
          echo "environment=${ENVIRONMENT}"
          echo "current dir=$(pwd)"
          [ -r "../devops-config/environments/${ENVIRONMENT}/values.yaml" ] && \
            cp ../devops-config/environments/${ENVIRONMENT}/values.yaml tmp/${COMPONENT_NAME}/charts/${ENVIRONMENT}
          [ -r "../cd-pipeline-kubernetes/environments/${ENVIRONMENT}/values.yaml" ] && \
            cp ../cd-pipeline-kubernetes/environments/${ENVIRONMENT}/values.yaml tmp/${COMPONENT_NAME}/charts/${ENVIRONMENT}
        fi

        set +e
        #helm version
        if ! helm list ${COMPONENT_NAME}; then
          deleted=$(helm list --all ${COMPONENT_NAME} | grep DELETED)
          echo "DELETED HELM: $deleted"
          if [ ! -z "$deleted" ]; then
            helm delete --purge ${COMPONENT_NAME}
          fi
          set -e
          echo "helm install --name ${COMPONENT_NAME} tmp/${COMPONENT_NAME} ${VALUES_OPT} --namespace ${CLUSTER_NAMESPACE} \
            --set tags.environment=false  --set ${ENVIRONMENT}.enabled=true  \
            --set global.ingressSubDomain=${INGRESS_SUBDOMAIN}"
          helm install --name ${COMPONENT_NAME} tmp/${COMPONENT_NAME} ${VALUES_OPT} --namespace ${CLUSTER_NAMESPACE} \
            --set tags.environment=false  --set ${ENVIRONMENT}.enabled=true  \
            --set global.ingressSubDomain=${INGRESS_SUBDOMAIN} --set global.ingressSecret=${INGRESS_SECRET}
        else
          set -e
          echo "helm upgrade --force ${COMPONENT_NAME} tmp/${COMPONENT_NAME} --install ${VALUES_OPT} --namespace ${CLUSTER_NAMESPACE} \
            --set tags.environment=false  --set ${ENVIRONMENT}.enabled=true \
            --set global.ingressSubDomain=${INGRESS_SUBDOMAIN}"
          helm upgrade --force ${COMPONENT_NAME} tmp/${COMPONENT_NAME} --install ${VALUES_OPT} --namespace ${CLUSTER_NAMESPACE} \
            --set tags.environment=false  --set ${ENVIRONMENT}.enabled=true \
            --set global.ingressSubDomain=${INGRESS_SUBDOMAIN} --set global.ingressSecret=${INGRESS_SECRET}
        fi
        set +e

        # save information for CR
        echo "Saving deploy info for CR"
        RUN=$( echo "${PIPELINE_RUN_URL}" \
              | cut -f7-9 -d/ | cut -f1 -d\? )
        RUN_ID=$( echo "$RUN" | cut -f3 -d/ )
        APP_VERSION=$( kubectl get -n${CLUSTER_NAMESPACE} deployment ${COMPONENT_NAME} -ojson \
          | jq -r '.spec.template.spec.containers[] | select(.name == "pipeline").image' \
          | cut -f2 -d: )
        echo "${COMPONENT_NAME},${APP_VERSION},${APPLICATION_VERSION},${CLUSTER_NAME},${PIPELINE_RUN_URL}"
        echo "${COMPONENT_NAME},${APP_VERSION},${APPLICATION_VERSION},${CLUSTER_NAME},${PIPELINE_RUN_URL}" >>"cr/$ENVIRONMENT/${RUN_ID}.csv"

        git config --global user.email "idsorg@us.ibm.com"
        git config --global user.name "IDS Organization"
        git config --global push.default matching
        git add -A "cr/$ENVIRONMENT"
        git commit -m "Adding deploy info for ${COMPONENT_NAME}-${CLUSTER_NAME}"

        n=0
        rc=0
        ORIG_DIR=$(pwd)
        until [ $n -ge 5 ]
        do
          git push
          rc=$?
          if [[ $rc == 0 ]]; then 
            break;
          fi
          n=$[$n+1]
          git pull
        done

