apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: deploy-chart
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc - this is where the cloned repository will be stored
      - name: source_directory
      - name: registryUrl
        default: us.icr.io
      - name: registryNamespace
        default: devopsotc
      - name: registryRegion
        default: us-south
      - name: imageName
        default: ''
      - name: imageTag
        default: ''
      - name: imageUrl
      - name: clusterName
        default: otc-us-south-dev
      - name: clusterNamespace
        default: opentoolchain
      - name: deployBaseImage
        default: us.icr.io/opentoolchain/cd-deploy-base:deploy
      - name: environment
        default: 'development'
      - name: skipDeploy
        default: 'false'
  stepTemplate:
    env:
      - name: API
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: API
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: REGION
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: DEPLOY_API_KEY
      - name: TOOLCHAIN_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: TOOLCHAIN_ID
  steps:
  - name: deploy
    image: $(inputs.params.deployBaseImage)
    imagePullPolicy: Always
    env:
      - name: HOME
        value: "/root"
      - name: IMAGE_NAME
        value: $(inputs.params.imageName)
      - name: APPLICATION_VERSION
        value: $(inputs.params.imageTag)
      - name: IMAGE_URL
        value: $(inputs.params.imageUrl)
      - name: REGISTRY_URL
        value: $(inputs.params.registryUrl)
      - name: REGISTRY_NAMESPACE
        value: $(inputs.params.registryNamespace)
      - name: REGISTRY_REGION
        value: $(inputs.params.registryRegion)
      - name: SOURCE_DIRECTORY
        value: $(inputs.params.source_directory)
      - name: SKIP
        value: $(inputs.params.skipDeploy)
      - name: CLUSTER_NAME
        value: $(inputs.params.clusterName)
      - name: CLUSTER_NAMESPACE
        value: $(inputs.params.clusterNamespace)
      - name: ENVIRONMENT
        value: $(inputs.params.environment)
    workingDir: /workspace
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root
        [ -f /root/.nvm/nvm.sh ] && source /root/.nvm/nvm.sh
        set -e
        set -x
        if [ "${SKIP}" == true ]; then
          echo "Skipping Deploy for $CLUSTER_NAME"
          exit 0
        fi
        cd "${SOURCE_DIRECTORY}"
        WORKDIR=${WORKDIR:-/work}
        VALUES_OPT=""

        ibmcloud config --check-version=false
        ibmcloud plugin install -f container-service
        ibmcloud login -a ${API} -r ${REGISTRY_REGION} --apikey ${API_KEY}
        
        IMAGE_URL=${IMAGE_URL:-${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}}
        COMPONENT_NAME=${COMPONENT_NAME:-${IMAGE_URL##*/}}

        if [[  -z "${APPLICATION_VERSION}" || "${APPLICATION_VERSION}" == "latest" ]]; then
          [ -r /workspace/appVersion ] && APPLICATION_VERSION=$( cat /workspace/appVersion )
          if [[  -z "${APPLICATION_VERSION}" || "${APPLICATION_VERSION}" == "latest" ]]; then
            ibmcloud cr images --restrict ${REGISTRY_NAMESPACE}/${COMPONENT_NAME} > _allImages
            APPLICATION_VERSION=$(cat _allImages | grep $(cat _allImages | grep latest | awk '{print $3}') | grep -v latest | awk '{print $2}')
          fi
        fi

        printf "Deploying release ${COMPONENT_NAME} into cluster ${CLUSTER_NAME},\nnamespace ${CLUSTER_NAMESPACE},\nwith image: ${IMAGE_URL}:${APPLICATION_VERSION}.\n"

        #[ -d /work ] && [ -d cd-pipeline-kubernetes ] && rm -rf cd-pipeline-kubernetes
        #[ -d /work ] && cp -a /work cd-pipeline-kubernetes
        #[ ! -d devops-config ] && cp cd-pipeline-kubernetes/devops-config .
        echo directory status
        pwd
        ls -F

        $(ibmcloud ks cluster config --export  --cluster ${CLUSTER_NAME})

        INGRESS_SUBDOMAIN=$(ibmcloud ks cluster get -s --cluster ${CLUSTER_NAME} | grep -i "Ingress subdomain:" | awk '{print $3;}')
        echo "INGRESS SUB DOMAIN: $INGRESS_SUBDOMAIN"
        if [[ ${INGRESS_SUBDOMAIN} == *,* ]];then
          INGRESS_SUBDOMAIN=$(echo "$INGRESS_SUBDOMAIN" | cut -d',' -f1)
          echo "INGRESS SUB DOMAIN: $INGRESS_SUBDOMAIN"
        fi

        INGRESS_SECRET=$(ibmcloud ks cluster get -s --cluster ${CLUSTER_NAME} | grep -i "Ingress secret:" | awk '{print $3;}')
        if [[ ${INGRESS_SECRET} == *,* ]];then
          INGRESS_SECRET=$(echo "$INGRESS_SECRET" | cut -d',' -f1)
          echo "INGRESS SECRET: $INGRESS_SECRET"
        fi

        CHART_PATH=$( ls -v charts/"${COMPONENT_NAME}"*.tgz |  tail -n 1 )
        mkdir tmp ; cd tmp
        tar zxf ../$CHART_PATH
        # pick up the environment values fresh if available
        #[ -r "../devops-config/environments/${ENVIRONMENT}/values.yaml" ] && VALUES_OPT="--values ../devops-config/environments/${ENVIRONMENT}/values.yaml"
        [ -r "../devops-config/environments/${ENVIRONMENT}/values.yaml" ] && \
          cp ../devops-config/environments/${ENVIRONMENT}/values.yaml tmp/${COMPONENT_NAME}/charts/${ENVIRONMENT}

        set +e
        if ! helm list ${COMPONENT_NAME}; then
          deleted=$(helm list --all ${COMPONENT_NAME} | grep DELETED)
          echo "DELETED HELM: $deleted"
          set -e
          if [ ! -z "$deleted" ]; then
            helm delete --purge ${COMPONENT_NAME}
          fi
          helm install --name ${COMPONENT_NAME} tmp/${COMPONENT_NAME} ${VALUES_OPT} --namespace ${CLUSTER_NAMESPACE} \
            --set tags.environment=false  --set ${ENVIRONMENT}.enabled=true  \
            --set global.ingressSubDomain=${INGRESS_SUBDOMAIN} --set global.ingressSecret=${INGRESS_SECRET}
        else
          set -e
          helm upgrade --force ${COMPONENT_NAME} tmp/${COMPONENT_NAME} --install ${VALUES_OPT} --namespace ${CLUSTER_NAMESPACE} \
            --set tags.environment=false  --set ${ENVIRONMENT}.enabled=true \
            --set global.ingressSubDomain=${INGRESS_SUBDOMAIN} --set global.ingressSecret=${INGRESS_SECRET}
        fi
        set +x

    volumeMounts:
      - mountPath: /workspace
        name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
