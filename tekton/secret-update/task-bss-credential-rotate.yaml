apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-bss-credential-rotate
spec:
  params:
    - name: block-until-verified
    - name: cr-backout-plan
    - name: cr-description
    - name: cr-purpose
    - name: cr-skip
    - name: ctask-description
    - name: ctask-short-description
    - name: gpfs-deployments
    - name: otc-deployments
    - name: remove-from-glb-during-update
    - name: restart-pws
    - name: slack-finish-description
    - name: slack-icon
    - name: slack-start-description
    - name: slack-username
    - name: vault-name
    - name: verification-string
    - name: zone-names
  workspaces:
    - name: task-pvc
      mountPath: /workspace
  steps:
    - name: update-secrets
      image: ibmcom/pipeline-base-image
      env:
        - name: PIPELINE_TRIGGERING_USER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
        - name: WEBHOOK_SECRET_UPDATER
          valueFrom:
            secretKeyRef:
              name: cd-secret
              key: WEBHOOK_SECRET_UPDATER
        - name: WEBHOOK_TOKEN_SECRET_UPDATER
          valueFrom:
            secretKeyRef:
              name: cd-secret
              key: WEBHOOK_TOKEN_SECRET_UPDATER
        - name: BSS_JSON
          valueFrom:
            secretKeyRef:
              name: cd-secret
              key: BSS_JSON
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          cd /workspace
          echo ${BSS_JSON}
          testResults=`sed 's/$/\\\\n/' test-results.txt | tr -d '\n'`
          cat << EOF > data.json
          {
              "cr-assigned-to": "$PIPELINE_TRIGGERING_USER",
              "cr-backout-plan": "$(params.cr-backout-plan)",
              "cr-description": "$(params.cr-description)",
              "cr-purpose": "$(params.cr-purpose)",
              "cr-skip": "true",
              "ctask-description": "$(params.ctask-description)",
              "ctask-short-description": "$(params.ctask-short-description)",
              "ctask-test-results": "$testResults",
              "slack-finish-description": "$(params.slack-finish-description)",
              "slack-icon": "$(params.slack-icon)",
              "slack-start-description": "$(params.slack-start-description)",
              "vault-name": "$(params.vault-name)",
              "add-absent-secrets": "true",
              "block-until-verified": "false",
              "otc-resources-to-restart": "$(params.otc-deployments)",
              "gpfs-resources-to-restart": "$(params.gpfs-deployments)",
              "remove-from-glb-during-update": "$(params.remove-from-glb-during-update)",
              "restart-pipeline-workers": "false",
              "verification-string": "$(params.verification-string)",
              "zone-names": "$(params.zone-names)"
          }
          EOF
          cat data.json
          #echo "Invoking the secret updater webhook..."
          #if curl -X POST "$WEBHOOK_SECRET_UPDATER" \
          #    -H "X-Token: $WEBHOOK_TOKEN_SECRET_UPDATER" \
          #    -H "Content-Type: application/json" \
          #    -d "@data.json" \
          #    --fail --silent --show-error | grep pending; then
          #    echo "Successfully invoked the webhook."
          #else
          #    echo "Failed to invoke the webhook."
          #    exit 1;
          fi
