apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-base
spec:
  inputs:
    params:
      - name: accountApiKey1416501
      - name: crRegion
        default: us-south
      - name: crAccountName
        default: a6677d241bbad8189145cbae0c73208f
      - name: idsToken
      - name: registryUrl
        default: us.icr.io
      - name: registryNamespace
        default: opentoolchain
      - name: imageName
      - name: imageTag
      - name: tagSuffix
        default: '.build'
      - name: charts_repo
      - name: config_repo
      - name: testImage
        default: ibmcom/pipeline-base-image:latest
  steps:
  - name: build-base
    image: $(inputs.params.testImage)
    env:
      - name: ACCOUNT_API_KEY
        value: $(inputs.params.accountApiKey1416501)
      - name: CR_REGION
        value: $(inputs.params.crRegion)
      - name: CR_ACCOUNT
        value: $(inputs.params.crAccountName)
      - name: IDS_TOKEN
        value: $(inputs.params.idsToken)
      - name: IMAGE_NAME
        value: $(inputs.params.imageName)
      - name: IMAGE_TAG
        value: $(inputs.params.imageTag)
      - name: TAG_SUFFIX
        value: $(inputs.params.tagSuffix)
      - name: REGISTRY_URL
        value: $(inputs.params.registryUrl)
      - name: REGISTRY_NAMESPACE
        value: $(inputs.params.registryNamespace)
      - name: CHARTS_REPO
        value: $(inputs.params.charts_repo)
      - name: CONFIG_REPO
        value: $(inputs.params.config_repo)
    command: ["/bin/bash", "-c"]
    args:
      - | 
        export HOME=/root && [ -f /root/.nvm/nvm.sh ] && chmod +x /root/.nvm/nvm.sh && source /root/.nvm/nvm.sh
        ibmcloud login -a cloud.ibm.com -r ${CR_REGION} --apikey ${ACCOUNT_API_KEY}
        ibmcloud cr info
        # ibmcloud plugin update --all
        echo "echo -n $IDS_TOKEN" > ./token.sh
        chmod +x ./token.sh
        GIT_ASKPASS=./token.sh git clone ${CONFIG_REPO}
        GIT_ASKPASS=./token.sh git clone ${CHARTS_REPO}
   
        echo -e "Build environment variables:"
        echo "REGISTRY_URL=${REGISTRY_URL}"
        echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
        echo "IMAGE_NAME=${IMAGE_NAME}"
        echo "IMAGE_TAG=${IMAGE_TAG}"
      
        echo "=========================================================="
       
        basename=$(basename ${CHARTS_REPO})
        echo "Checking for Dockerfile at the root of $basename"
        if [ -f ${basename%.*}/docker/Dockerfile.${IMAGE_TAG}.${TAG_SUFFIX} ]; then 
          echo "Dockerfile found"
        else
            echo "Dockerfile not found"
            exit 1
        fi

        echo "=========================================================="

        echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
        NS=$( ibmcloud cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
        if [ -z "${NS}" ]; then
            echo "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
            ibmcloud cr namespace-add ${REGISTRY_NAMESPACE}
            echo "Registry namespace ${REGISTRY_NAMESPACE} created."
        else 
            echo "Registry namespace ${REGISTRY_NAMESPACE} found."
        fi

        echo "=========================================================="
        echo -e "Building container image: ${IMAGE_NAME}:${IMAGE_TAG}"
        set -x
        ibmcloud cr build -f docker/Dockerfile.${IMAGE_TAG} ${EXTRA_DOCKER_OPTS} -t ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG} .
        set +x
        ibmcloud cr image-inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}
