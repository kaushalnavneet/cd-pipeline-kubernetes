apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-agent
spec:
  params:
    - name: componentRepo
    - name: componentRevision
    - name: idsToken
    - name: accountRegion
      default: us-south
    - name: imageUrl
    - name: imageName
      default: ''
    - name: accountApiKey1308775
    - name: buildCluster
      default: ''
    - name: dockerUsername
      default: iamapikey
    - name: accountApiKey1416501
    - name: runBaseImage
      default: us.icr.io/opentoolchain/cd-build-base:go1.15
    - name: extraDockerOpts
      default: --no-cache --pull
    - name: idsUser
      default: idsorg
    - name: artifactoryToken
      default: ''
    - name: artifactoryId
      default: ''
    - name: consoleAuthToken
      default: ''
    - name: dockerhubPassword
    - name: envTag
    - name: skipOldAgentBuild
      default: "false"
    - name: skipNewAgentBuild
      default: "true"
    - name: skipVA
    - name: registryUrl
      default: us.icr.io
    - name: registryNamespace
      default: devopsotc
    - name: imageName
      default: ''
    - name: dockerFile
      default: ''
    - name: imageTag
      default: ''
    - name: environment
      default: ''
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
  - name: run-base
    image: $(params.runBaseImage)
    volumeMounts:
      - mountPath: /var/run/
        name: dind-socket
    imagePullPolicy: IfNotPresent
    env:
      - name: IDS_TOKEN
        value: $(params.idsToken)
      - name: COMPONENT_REPO
        value: $(params.componentRepo)
      - name: COMPONENT_REVISION
        value: $(params.componentRevision)
      - name: IMAGE_URL
        value: $(params.imageUrl)
      - name: API_KEY
        value: $(params.accountApiKey1308775)
      - name: ACCOUNT_REGION
        value: $(params.accountRegion)
      - name: BUILD_CLUSTER
        value: $(params.buildCluster)
      - name: DOCKER_USERNAME
        value: $(params.dockerUsername)
      - name: DOCKER_PASSWORD
        value: $(params.accountApiKey1416501)
      - name: DOCKER_IMAGE
        value: $(params.runBaseImage)
      - name: OPERATOR_SDK
        value: "true"
      - name: EXTRA_DOCKER_OPTS
        value: $(params.extraDockerOpts)
      - name: IDS_USER
        value: $(params.idsUser)
      - name: ARTIFACTORY_TOKEN_BASE64
        value: $(params.artifactoryToken)
      - name: ARTIFACTORY_ID
        value: $(params.artifactoryId)
      - name: CONSOLE_AUTH_TOKEN
        value: $(params.consoleAuthToken)
      - name: DOCKERHUB_USERNAME
        value: idsorg
      - name: DOCKERHUB_PASSWORD
        value: $(params.dockerhubPassword)
      - name: DOCKERHUB_IMAGE_NAME
        value: ibmcom/pipeline-private-worker
      - name: ENV_TAG
        value: $(params.envTag)
      - name: DOCKER_HOST
        value: "unix:///var/run/docker.sock"
      - name: SKIP
        value: $(params.skipOldAgentBuild)
    command: ["/bin/bash", "-c"]
    args:
      - |
        set -e
        if [ "${SKIP}" == true ]; then
          echo "Skipping old agent build"
          exit 0
        fi

        export HOME=/root && [ -f /root/.nvm/nvm.sh ] && chmod +x /root/.nvm/nvm.sh && source /root/.nvm/nvm.sh

        export GOPATH=`pwd`
        mkdir -p src/github.ibm.com/org-ids
        cd src/github.ibm.com/org-ids

        echo "echo -n $IDS_TOKEN" > ./token.sh
        chmod +x ./token.sh
        GIT_ASKPASS=./token.sh git clone --single-branch --branch ${COMPONENT_REVISION} ${COMPONENT_REPO}
        basename=$(basename ${COMPONENT_REPO})
        cd ${basename%.*}

        ls -al
        #export GO111MODULE=on


        cp -a /work cd-pipeline-kubernetes

        IBM_CLOUD_API=${IBM_CLOUD_API:-cloud.ibm.com}
        IMAGE_URL=${IMAGE_URL:-${IMAGE_REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}}
        COMPONENT_NAME=${COMPONENT_NAME:-${IMAGE_URL##*/}}
        DOCKERFILE=${DOCKERFILE:-cd-pipeline-kubernetes/docker/Dockerfile.${DOCKER_IMAGE##*:}}

        ibmcloud login -a ${IBM_CLOUD_API} --apikey ${API_KEY} -r ${ACCOUNT_REGION}

        echo "Building using local Docker"

        if [ -z "$GIT_COMMIT" ]; then
          GIT_COMMIT=$(git rev-parse --verify HEAD)
        fi
        TIMESTAMP=$(date +%Y%m%d%H%M%Z)
        if [ -z "$APPLICATION_VERSION" ]; then
          APPLICATION_VERSION="${GIT_COMMIT}-${TIMESTAMP}"
        fi

        echo "Building ${IMAGE_URL}:${APPLICATION_VERSION}"
        echo ${APPLICATION_VERSION} > .pipeline_build_id
        echo "{\"build\": \"$TIMESTAMP\",\"commit\":\"$GIT_COMMIT\",\"appName\" : \"${COMPONENT_NAME}\",\"platform\" : \"Armada\"}" > build_info.json

        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_IMAGE%%/*}
        # For some reason this doesn't get repulled in docker engine
        docker pull ${DOCKER_IMAGE}
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker pull command\"
            exit 1
        fi
        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${IMAGE_URL%%/*}
        echo "Dockerfile: ${DOCKERFILE}"
        if [ "$OPERATOR_SDK" == true ]; then
        go mod vendor
        operator-sdk build ${IMAGE_URL}:${APPLICATION_VERSION}
        else
        docker build . ${EXTRA_DOCKER_OPTS} -t ${IMAGE_URL}:${APPLICATION_VERSION} -f ${DOCKERFILE} --build-arg COMPONENT=${COMPONENT_NAME} --build-arg DEVELOPMENT=false --build-arg IDS_USER=${IDS_USER} --build-arg IDS_TOKEN=${IDS_TOKEN}  --build-arg ARTIFACTORY_TOKEN_BASE64=${ARTIFACTORY_TOKEN_BASE64} --build-arg ARTIFACTORY_ID=${ARTIFACTORY_ID} --build-arg CONSOLE_AUTH_TOKEN=${CONSOLE_AUTH_TOKEN}
        fi
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker build command\"
            exit 1
        fi

        AGENT_VERSION=`cat version/version.go | grep "Version" | awk '{print $3}' | tr -d '"'`

        docker tag ${IMAGE_URL}:${APPLICATION_VERSION} ${IMAGE_URL}:${AGENT_VERSION}${ENV_TAG}
        if [ $? -ne 0 ]; then
            echo \"Failed during execution of docker tag command\"
            exit 1
        fi

        echo ${AGENT_VERSION}${ENV_TAG} > /artifacts/appVersion
        docker push ${IMAGE_URL}:${AGENT_VERSION}${ENV_TAG}

        echo "###########################################"
        echo ${IMAGE_URL}:${APPLICATION_VERSION} ${DOCKERHUB_IMAGE_NAME}:${AGENT_VERSION}${ENV_TAG}
        docker tag ${IMAGE_URL}:${APPLICATION_VERSION} ${DOCKERHUB_IMAGE_NAME}:${AGENT_VERSION}${ENV_TAG}

        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
        docker push ${DOCKERHUB_IMAGE_NAME}:${AGENT_VERSION}${ENV_TAG}
        echo "###########################################"
  - name: buildCurrentAgent
    image: $(params.runBaseImage)
    volumeMounts:
      - mountPath: /var/run/
        name: dind-socket
    imagePullPolicy: IfNotPresent
    env:
      - name: IDS_TOKEN
        value: $(params.idsToken)
      - name: COMPONENT_REPO
        value: $(params.componentRepo)
      - name: COMPONENT_REVISION
        value: $(params.componentRevision)
      - name: IMAGE_URL
        value: $(params.imageUrl)
      - name: API_KEY
        value: $(params.accountApiKey1308775)
      - name: ACCOUNT_REGION
        value: $(params.accountRegion)
      - name: BUILD_CLUSTER
        value: $(params.buildCluster)
      - name: DOCKER_USERNAME
        value: $(params.dockerUsername)
      - name: DOCKER_PASSWORD
        value: $(params.accountApiKey1416501)
      - name: DOCKER_IMAGE
        value: $(params.runBaseImage)
      - name: OPERATOR_SDK
        value: "true"
      - name: EXTRA_DOCKER_OPTS
        value: $(params.extraDockerOpts)
      - name: IDS_USER
        value: $(params.idsUser)
      - name: ARTIFACTORY_TOKEN_BASE64
        value: $(params.artifactoryToken)
      - name: ARTIFACTORY_ID
        value: $(params.artifactoryId)
      - name: CONSOLE_AUTH_TOKEN
        value: $(params.consoleAuthToken)
      - name: DOCKERHUB_USERNAME
        value: idsorg
      - name: DOCKERHUB_PASSWORD
        value: $(params.dockerhubPassword)
      - name: DOCKERHUB_IMAGE_NAME
        value: ibmcom/pipeline-private-worker
      - name: ENV_TAG
        value: $(params.envTag)
      - name: DOCKER_HOST
        value: "unix:///var/run/docker.sock"
      - name: SKIP
        value: $(params.skipNewAgentBuild)
    command: ["/bin/bash", "-c"]
    args:
      - |
        set -e
        if [ "${SKIP}" == true ]; then
          echo "Skipping new agent build"
          exit 0
        fi
        export HOME=/root && [ -f /root/.nvm/nvm.sh ] && chmod +x /root/.nvm/nvm.sh && source /root/.nvm/nvm.sh

        export GOPATH=`pwd`
        mkdir -p src/github.ibm.com/org-ids
        cd src/github.ibm.com/org-ids
  - name: run-va
    image: $(params.runBaseImage)
    imagePullPolicy: IfNotPresent
    env:
      - name: API_KEY
        value: $(params.accountApiKey1416501)
      - name: ACCOUNT_REGION
        value: $(params.accountRegion)
      - name: IMAGE_URL
        value: $(params.imageUrl)
      - name: IMAGE_REGISTRY
        value: $(params.registryUrl)
      - name: IMAGE_NAMESPACE
        value: $(params.registryNamespace)
      - name: IMAGE_NAME
        value: $(params.imageName)
      - name: DOCKERFILE
        value: $(params.dockerFile)
      - name: DOCKER_IMAGE
        value: $(params.runBaseImage)
      - name: DOCKER_USERNAME
        value: $(params.dockerUsername)
      - name: DOCKER_PASSWORD
        value: $(params.accountApiKey1416501)
      - name: APPLICATION_VERSION
        value: $(params.imageTag)
      - name: ENVIRONMENT
        value: $(params.environment)
      - name: SKIP
        value: $(params.skipVA)
    command: ["/bin/bash", "-c"]
    args:
      - |
        set -e
        if [ "${SKIP}" == true ]; then
          echo "Skipping VA"
          exit 0
        fi
        
        wget --no-check-certificate https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /usr/bin/jq
        chmod +x /usr/bin/jq
        
        APPLICATION_VERSION=$(cat /artifacts/appVersion)
        export HOME=/root && [ -f /root/.nvm/nvm.sh ] && chmod +x /root/.nvm/nvm.sh && source /root/.nvm/nvm.sh
        cd /work
        
        IBM_CLOUD_API=${IBM_CLOUD_API:-cloud.ibm.com}
        
        ibmcloud login -a ${IBM_CLOUD_API} -r ${ACCOUNT_REGION} --apikey ${DOCKER_PASSWORD}
        ibmcloud cr region-set global
        # default value for PIPELINE_IMAGE_URL -- uncomment and customize as needed
        export PIPELINE_IMAGE_URL="${IMAGE_URL}:${APPLICATION_VERSION}"
        echo "PIPELINE_IMAGE_URL=${PIPELINE_IMAGE_URL}"

        for iteration in {1..30}
        do
          BX_CR_VA=$(ibmcloud cr va $PIPELINE_IMAGE_URL --output json)
          if [[ $? -eq 0 ]]; then
            BX_CR_VA=$(echo -n ${BX_CR_VA} | jq -r '.[] .status')
            echo "BX_CR_VA=${BX_CR_VA}"
            if [[ "${BX_CR_VA}" == "OK" ]]; then
              break
            fi
          else
            echo "error while running va check: ${BX_CR_VA}"
          fi
          echo -e "A vulnerability report was not found for the specified image, either the image doesn't exist or the scan hasn't completed yet. Waiting for scan to complete.."
          sleep 10
        done
        echo "${BX_CR_VA}"
        if [[ ! "${BX_CR_VA}" == "OK" ]]; then
          echo "ERROR: The vulnerability scan was not successful, check the output of the command and try again."
          exit 1
        fi

  sidecars:
    - image: docker:dind
      name: server
      command:
        - dockerd-entrypoint.sh
        - dockerd
        - --host=unix:///var/run/docker.sock
        - --mtu=1400
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/run/
          name: dind-socket
  volumes:
    - name: dind-socket
      emptyDir: {}
