apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-agent
spec:
  inputs:
    params:
      - name: pipelinePVC
      - name: componentRepo
      - name: componentRevision
      - name: idsToken
      - name: accountRegion
        default: us-south
      - name: imageUrl
      - name: imageName
        default: ''
      - name: accountApiKey1308775
      - name: buildCluster
        default: otc-dal12-build
      - name: dockerUsername
        default: iamapikey
      - name: accountApiKey1416501
      - name: runBaseImage
        default: us.icr.io/opentoolchain/cd-build-base:go1.10
      - name: extraDockerOpts
        default: --no-cache --pull
      - name: idsUser
        default: idsorg
      - name: artifactoryToken
        default: ''
      - name: artifactoryId
        default: ''
      - name: consoleAuthToken
        default: ''
      - name: dockerhubPassword
      - name: envTag
      - name: skipVA
      - name: registryUrl
        default: us.icr.io
      - name: registryNamespace
        default: devopsotc
      - name: imageName
        default: ''
      - name: dockerFile
        default: ''
      - name: imageTag
        default: ''
      - name: environment
        default: ''
  steps:
  - name: run-base
    image: $(inputs.params.runBaseImage)
    imagePullPolicy: Always
    env:
      - name: IDS_TOKEN
        value: $(inputs.params.idsToken)
      - name: COMPONENT_REPO
        value: $(inputs.params.componentRepo)
      - name: COMPONENT_REVISION
        value: $(inputs.params.componentRevision)
      - name: IMAGE_URL
        value: $(inputs.params.imageUrl)
      - name: API_KEY
        value: $(inputs.params.accountApiKey1308775)
      - name: ACCOUNT_REGION
        value: $(inputs.params.accountRegion)
      - name: BUILD_CLUSTER
        value: $(inputs.params.buildCluster)
      - name: DOCKER_USERNAME
        value: $(inputs.params.dockerUsername)
      - name: DOCKER_PASSWORD
        value: $(inputs.params.accountApiKey1416501)
      - name: DOCKER_IMAGE
        value: $(inputs.params.runBaseImage)
      - name: OPERATOR_SDK
        value: "true"
      - name: EXTRA_DOCKER_OPTS
        value: $(inputs.params.extraDockerOpts)
      - name: IDS_USER
        value: $(inputs.params.idsUser)
      - name: ARTIFACTORY_TOKEN_BASE64
        value: $(inputs.params.artifactoryToken)
      - name: ARTIFACTORY_ID
        value: $(inputs.params.artifactoryId)
      - name: CONSOLE_AUTH_TOKEN
        value: $(inputs.params.consoleAuthToken)
      - name: DOCKERHUB_USERNAME
        value: thebog
      - name: DOCKERHUB_PASSWORD
        value: $(inputs.params.dockerhubPassword)
      - name: DOCKERHUB_IMAGE_NAME
        value: ibmcom/pipeline-private-worker
      - name: ENV_TAG
        value: $(inputs.params.envTag)
    command: ["/bin/bash", "-c"]
    args:
      - | 
        set -e
       
        export HOME=/root && [ -f /root/.nvm/nvm.sh ] && chmod +x /root/.nvm/nvm.sh && source /root/.nvm/nvm.sh
        
        export GOPATH=`pwd`
        mkdir -p src/github.ibm.com/org-ids
        cd src/github.ibm.com/org-ids

        echo "echo -n $IDS_TOKEN" > ./token.sh
        chmod +x ./token.sh
        GIT_ASKPASS=./token.sh git clone --single-branch --branch ${COMPONENT_REVISION} ${COMPONENT_REPO}
        basename=$(basename ${COMPONENT_REPO})
        cd ${basename%.*}
        
        ls -al
        #export GO111MODULE=on

        chmod u+x /work/scripts/pipeline_build_tek.sh
        source /work/scripts/pipeline_build_tek.sh

        AGENT_VERSION=`cat version/version.go | grep "Version" | awk '{print $3}' | tr -d '"'`
        echo "###########################################"
        echo ${IMAGE_URL}:${APPLICATION_VERSION} ${DOCKERHUB_IMAGE_NAME}:${AGENT_VERSION}${ENV_TAG}
        docker tag ${IMAGE_URL}:${APPLICATION_VERSION} ${DOCKERHUB_IMAGE_NAME}:${AGENT_VERSION}${ENV_TAG}

        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
        docker push ${DOCKERHUB_IMAGE_NAME}:${AGENT_VERSION}${ENV_TAG}
        echo "###########################################"
    volumeMounts:
      - mountPath: /artifacts
        name: task-volume
  - name: run-va
    image: $(inputs.params.runBaseImage)
    imagePullPolicy: Always
    env:
      - name: API_KEY
        value: $(inputs.params.accountApiKey1416501)
      - name: ACCOUNT_REGION
        value: $(inputs.params.accountRegion)
      - name: IMAGE_URL
        value: $(inputs.params.imageUrl)
      - name: IMAGE_REGISTRY
        value: $(inputs.params.registryUrl)
      - name: IMAGE_NAMESPACE
        value: $(inputs.params.registryNamespace)
      - name: IMAGE_NAME
        value: $(inputs.params.imageName)
      - name: DOCKERFILE
        value: $(inputs.params.dockerFile)
      - name: DOCKER_IMAGE
        value: $(inputs.params.runBaseImage)
      - name: DOCKER_USERNAME
        value: $(inputs.params.dockerUsername)
      - name: DOCKER_PASSWORD
        value: $(inputs.params.accountApiKey1416501)
      - name: APPLICATION_VERSION
        value: $(inputs.params.imageTag)
      - name: ENVIRONMENT
        value: $(inputs.params.environment)
      - name: SKIP
        value: $(inputs.params.skipVA)
    command: ["/bin/bash", "-c"]
    args:
      - | 
        set -e
        if [ "${SKIP}" == true ]; then
          echo "Skipping VA"
          exit 0
        fi
        APPLICATION_VERSION=$(cat /artifacts/appVersion)
        export HOME=/root && [ -f /root/.nvm/nvm.sh ] && chmod +x /root/.nvm/nvm.sh && source /root/.nvm/nvm.sh
        cd /work
        chmod u+x /work/scripts/pipeline_va_tek.sh
        "$_"
    volumeMounts:
      - mountPath: /artifacts
        name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.pipelinePVC)
